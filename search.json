[{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://anytko.github.io/GeoFunPhy/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"vignete-info","dir":"Articles","previous_headings":"","what":"Vignete Info","title":"GeoFunPhy","text":"vignette provides introduction usage GeoFunPhy. vignette, use four functional traits (SLA, seed mass, leaf mass, canopy height) various tree, shrub, flower species representative potential plant community Southeastern U.S. classify visualize respective ecological statuses. vignette feature caluclate species range sizes step--step well use function calc_range_size() perform calculations one step.","code":"library(GeoFunPhy)"},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"create-trait-dataframe","dir":"Articles","previous_headings":"Example","what":"Create Trait Dataframe","title":"GeoFunPhy","text":"","code":"trait_df <- build_trait_data_LEDA(columns_to_select = c(\"SLA\", \"seed_mass\", \"leaf_mass\", \"canopy_height\"), genera = c(\"Acer_\", \"Pinus_\", \"Fraxinus_\", \"Quercus_\", \"Tsuga_\", \"Solidago_\", \"Ulmus\", \"Populus\", \"Rhododendron_\", \"Betula_\"))"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"input-phylogeny","dir":"Articles","previous_headings":"Example","what":"Input Phylogeny","title":"GeoFunPhy","text":"Users can input phylogeny use one four phylogeneies listed Smith & Brown 2018 including: ALLMB: GenBank Open Tree Life taxa backbone provided Magallón et al. 2015 ALLOTB: GenBank Open Tree Life taxa backbone provided Open Tree Life version 9.1 GBMB: GenBank taxa backbone provided Magallón et al. 2015 GBOTB: GenBank taxa backbone provided Open Tree Life version 9.1”","code":"GBMB_phylogeny <- get_phy_angio(\"GBMB\")"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"calculate-range-size-one-step","dir":"Articles","previous_headings":"Example","what":"Calculate Range Size *one step","title":"GeoFunPhy","text":"","code":"species_range_size <- calc_range_size(data_frame = trait_df, min_points = 4, gbif_limit = 2000, num_cores = 1)"},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"generate-range-convex-hulls","dir":"Articles","previous_headings":"Example > Calculate Range Size *step-by-step","what":"Generate range convex hulls","title":"GeoFunPhy","text":"","code":"convex_hulls <- get_range_convex_hulls(data_frame = trait_df, min_points = 4, gbif_limit = 2000, num_cores = 1) #> Warning: Setting row names on a tibble is deprecated."},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"read-in-a-continent-geojson","dir":"Articles","previous_headings":"Example > Calculate Range Size *step-by-step","what":"Read in a continent GeoJSON","title":"GeoFunPhy","text":"","code":"continent_bounds <- get_continent_sf()"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"clip-range-convex-hulls-to-continent-continent_bounds","dir":"Articles","previous_headings":"Example > Calculate Range Size *step-by-step","what":"Clip range convex hulls to continent continent_bounds","title":"GeoFunPhy","text":"","code":"clipped_hulls <- clip_polygons_to_land(convex_hulls = convex_hulls, continent_sf = continent_bounds)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"calculate-the-range-sizes-of-these-clipped-convex-hulls","dir":"Articles","previous_headings":"Example > Calculate Range Size *step-by-step","what":"Calculate the range sizes of these clipped convex hulls","title":"GeoFunPhy","text":"","code":"range_sizes_step <- range_sizes(clipped_hulls)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"find-which-continents-contain-each-species-convex-hulls","dir":"Articles","previous_headings":"Example","what":"Find which continents contain each species’ convex hulls","title":"GeoFunPhy","text":"","code":"continents <- check_continents(clipped_hulls, continent_bounds)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"find-which-biomes-contain-each-species-convex-hulls","dir":"Articles","previous_headings":"Example","what":"Find which biomes contain each species’ convex hulls","title":"GeoFunPhy","text":"","code":"biomes <- check_biomes(clipped_hulls)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"calculate-evolutionary-distinctiveness","dir":"Articles","previous_headings":"Example","what":"Calculate Evolutionary Distinctiveness","title":"GeoFunPhy","text":"","code":"evol_df <- avg_evol_dist(data_frame = trait_df, phy = GBMB_phylogeny, time_slices = c(10, 25, 50), num_cores = 6) DT::datatable(evol_df)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"calculate-functional-distinctiveness","dir":"Articles","previous_headings":"Example","what":"Calculate Functional Distinctiveness","title":"GeoFunPhy","text":"order calculate functional distinctiveness, need merge range size evolutionary distinctiveness dataframes remove species NA values trait.","code":"merged_df <- merge(merge(trait_df, species_range_size, by = \"species_name\", all = TRUE), evol_df, by = \"species_name\", all = TRUE)  merged_df <- na.omit(merged_df) fun_evol_range_df <- fun_dist(data_frame = merged_df, trait_columns = c(\"SLA\", \"seed_mass\", \"leaf_mass\", \"canopy_height\"))"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"z-transform-dataframe","dir":"Articles","previous_headings":"Example","what":"Z Transform Dataframe","title":"GeoFunPhy","text":"","code":"z_score_df <- scale_by_median(data_frame = fun_evol_range_df, columns_chosen = c(\"range_size\", \"mean_evol_dist\"))"},{"path":[]},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"range-size-eblow-k-2","dir":"Articles","previous_headings":"Example > Create Elbow Plots to Detmine Optimal K Means","what":"Range Size Eblow: K = 2","title":"GeoFunPhy","text":"","code":"range_elbow <- elbow_plot(data = z_score_df, variable = \"range_size\", k_max = 5, ggplot = TRUE)  print(range_elbow)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"evolutionary-distinctiveness-eblow-k-2","dir":"Articles","previous_headings":"Example > Create Elbow Plots to Detmine Optimal K Means","what":"Evolutionary Distinctiveness Eblow: K = 2","title":"GeoFunPhy","text":"","code":"evol_elbow <- elbow_plot(data = z_score_df, variable = \"mean_evol_dist\", k_max = 5, ggplot = TRUE)  print(evol_elbow)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"functional-distinctiveness-eblow-k-2","dir":"Articles","previous_headings":"Example > Create Elbow Plots to Detmine Optimal K Means","what":"Functional Distinctiveness Eblow: K = 2","title":"GeoFunPhy","text":"","code":"fun_elbow <- elbow_plot(data = z_score_df, variable = \"fun_dist\", k_max = 5, ggplot = TRUE)  print(fun_elbow)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"determine-eco-evolutionary-rarity-status","dir":"Articles","previous_headings":"Example","what":"Determine Eco-evolutionary Rarity Status","title":"GeoFunPhy","text":"","code":"EER_stat_df <- check_EER_status_k(data_frame = z_score_df, range_size_col = \"range_size\", mean_evol_dist_col = \"mean_evol_dist\", fun_dist_col = \"fun_dist\", range_size_k = 3, mean_evol_dist_k = 2, fun_dist_k = 2)"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"visualizing-eco-evolutionary-status","dir":"Articles","previous_headings":"Example","what":"Visualizing Eco-evolutionary Status","title":"GeoFunPhy","text":"can map ecological statuses species large dataframe onto 2D interactive 3D space. object can manipulated positioned user order best visualize respective ecological statuses.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"d-visualization-of-rarity-using-a-treemap","dir":"Articles","previous_headings":"Example > Visualizing Eco-evolutionary Status","what":"2D Visualization of rarity using a treemap","title":"GeoFunPhy","text":"","code":"tree_map <- build_treemap(data_frame = EER_stat_df, plot = TRUE) tree_map"},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"d-visualization-of-rarity-using-rglwidget","dir":"Articles","previous_headings":"Example > Visualizing Eco-evolutionary Status","what":"3D Visualization of rarity using rglwidget","title":"GeoFunPhy","text":"","code":"figure <- plot_EER_status(data_frame = EER_stat_df, fun_dist = \"fun_dist\", range_size = \"range_size\", evol_dist = \"mean_evol_dist\") rglwidget()"},{"path":[]},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/articles/GeoFunPhy.html","id":"geofunphy-also-offers-plotting-functionality-of-raw-unclipped-range-polygons","dir":"Articles","previous_headings":"Example > Extra","what":"GeoFunPhy also offers plotting functionality of raw (unclipped) range polygons","title":"GeoFunPhy","text":"","code":"trait_df_subset <- trait_df[1:5, ] acer_maps <- range_poly_map(data_frame = trait_df_subset, clip = TRUE, continent_sf = continent_bounds) #> Warning: Setting row names on a tibble is deprecated. knitr::include_graphics(\"acer_map_screenshot.png\")"},{"path":"https://anytko.github.io/GeoFunPhy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alivia Nytko. Author, maintainer.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nytko (2024). GeoFunPhy: Analysis Ecological Evolutionary Rarity Status. R package version 1.0, https://anytko.github.io/GeoFunPhy/.","code":"@Manual{,   title = {GeoFunPhy: Analysis of Ecological and Evolutionary Rarity Status},   author = {Alivia Nytko},   year = {2024},   note = {R package version 1.0},   url = {https://anytko.github.io/GeoFunPhy/}, }"},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"GeoFunPhy tool used classify eco-evolutionary rarity species varying geographic, phylogenetic, functional trait rarity. ecological status proposed GeoFunPhy can used infer larger organismal strategy. get_phy_angio() sources choice phylogeny Smith & Brown 2018 build_trait_data_LEDA() constructs dataframe chosen functional traits LEDA trait database calc_range_size() calculates range size species avg_evol_dist() calculates evolutionary distinctiveness species across distinct times multiple phylogenetic extents fun_dist() calculates functional distinctiveness (FD) species based trait data scale_by_median() scales desired data within dataframe using median z scores elbow_plot() displays elbowplot different K means variable compute_wcss() computes Within-Cluster Sum Squares (WCSS) given variable range cluster values (k) using k-means clustering define_custom_k_ranges() performs k-means clustering variable define custom ranges based cluster centers check_EER_status_k() classifies eco-evolutionary rarity (EER) chosen species within dataframe get_range_convex_hulls() creates convex hulls species using cleaned GBIF occurence data clip_polygons_to_land() clips range convex hulls continent boundaries range_sizes() calculates range size clipped convex hulls get_continent_sf() reads formats GeoJSON document continent data check_continents() checks continents species convex hulls occur check_biomes() checks biomes species convex hulls occur plot_convex_hulls() plots species’ occurence polygons onto world map -plot_clipped_hulls() plots species’ clipped occurence polygons (clipped continent bounds) onto world map range_poly_map() creates plots species’ occurence polygons onto world map plot_EER_status() visualizes eco-evolutionary rarity categories 3D space build_treemap() visualizes eco-evolutionary rarity categories using treemap","code":""},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"can install development version GeoFunPhy like :","code":"devtools::install_github(\"anytko/GeoFunPhy\")"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"basic example demonstrates GeoFunPhy useage shows can determine eco-evolutionary status common tree genera using SLA, seed_mass, canopy_height. Note certain functions, called calc_range_size() included (.e. get_range_convex_hulls() clip_polygons_to_land()). Please see GeoFunPhy vignette comprehensive example information extra functionality.","code":"library(GeoFunPhy)"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"create-trait-dataframe","dir":"","previous_headings":"","what":"Create Trait Dataframe","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"trait_df <- build_trait_data_LEDA(columns_to_select = c(\"SLA\", \"seed_mass\", \"canopy_height\"), genera = c(\"Acer_\", \"Pinus_\", \"Fraxinus_\", \"Quercus_\", \"Tsuga_\", \"Ulmus\", \"Populus\", \"Betula_\"))"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"input-phylogeny","dir":"","previous_headings":"","what":"Input Phylogeny","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"Users can input phylogeny use one four phylogeneies listed Smith & Brown 2018 including: ALLMB: GenBank Open Tree Life taxa backbone provided Magallón et al. 2015 ALLOTB: GenBank Open Tree Life taxa backbone provided Open Tree Life version 9.1 GBMB: GenBank taxa backbone provided Magallón et al. 2015 GBOTB: GenBank taxa backbone provided Open Tree Life version 9.1”","code":"GBMB_phylogeny <- get_phy_angio(\"GBMB\")"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"calculate-range-sizes","dir":"","previous_headings":"","what":"Calculate Range Sizes","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"range_sizes_df <- calc_range_size(data_frame = trait_df, num_cores = 1, gbif_limit = 2500)"},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"plot-the-range-polygons-of-a-species-from-the-table-above-acer-campestre","dir":"","previous_headings":"Plot Range Polygons","what":"Plot the range polygons of a species from the table above: Acer campestre","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"acer_campestre_range <- data.frame(species_name = c(\"Acer campestre\"))  range_poly_map(data_frame = acer_campestre_range)"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"or","dir":"","previous_headings":"Plot Range Polygons","what":"OR","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"continent_bounds <- get_continent_sf() range_poly_map(data_frame = acer_campestre_range, clip = TRUE, continent_sf = continent_bounds)"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"calculate-average-evolutionary-distinctiveness","dir":"","previous_headings":"","what":"Calculate Average Evolutionary Distinctiveness","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"trait_range_evol_df <- avg_evol_dist(phy = GBMB_phylogeny, data_frame = trait_df, num_cores = 6, time_slices = c(5, 10, 20, 35))"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"calculate-functional-distinctiveness","dir":"","previous_headings":"","what":"Calculate Functional Distinctiveness","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"order calculate functional distinctiveness, need remove species NA values trait.","code":"merged_df <- merge(merge(trait_df, range_sizes_df, by = \"species_name\", all = TRUE), trait_range_evol_df, by = \"species_name\", all = TRUE)  merged_df <- na.omit(merged_df)  fun_trait_range_evol_df <- fun_dist(data_frame = merged_df, trait_columns = c(\"SLA\", \"seed_mass\", \"canopy_height\"))"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"transform-dataframe-around-the-median","dir":"","previous_headings":"","what":"Transform Dataframe Around the Median","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"scaled_df <- scale_by_median(data_frame = fun_trait_range_evol_df, columns_chosen = c(\"range_size\", \"mean_evol_dist\"))"},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"the-optimal-k-means-value-can-be-determined-by-finding-the-elbow-or-bend-in-the-plot-for-example-in-the-three-plots-below-a-k--3-represents-the-plots-elbow","dir":"","previous_headings":"Create Elbow Plots to Detmine Optimal K Means","what":"The optimal K means value can be determined by finding the “elbow” or bend in the plot. For example, in the three plots below a K = 3 represents the plot’s elbow.","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"range_elbow <- elbow_plot(data = scaled_df, variable = \"range_size\", k_max = 10, ggplot = TRUE)  print(range_elbow)  evol_elbow <- elbow_plot(data = scaled_df, variable = \"mean_evol_dist\", k_max = 10, ggplot = TRUE)  print(evol_elbow)  fun_elbow <- elbow_plot(data = scaled_df, variable = \"fun_dist\", k_max = 10, ggplot = TRUE)  print(fun_elbow)"},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"hint-use-the-elbow-plots-above-to-determine-optimal-k-means-values","dir":"","previous_headings":"Determine Eco-Evolutionary Rarity Status","what":"Hint: Use the elbow plots above to determine optimal K means values","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"","code":"eco_stat_df <- check_EER_status_k(data_frame = scaled_df, range_size_col = \"range_size\", mean_evol_dist_col = \"mean_evol_dist\", fun_dist_col = \"fun_dist\", range_size_k = 3, mean_evol_dist_k = 3, fun_dist_k = 3)"},{"path":"https://anytko.github.io/GeoFunPhy/index.html","id":"visualizing-eco-evolutionary-rarity-status","dir":"","previous_headings":"","what":"Visualizing Eco-evolutionary Rarity Status","title":"Analysis of Ecological and Evolutionary Rarity Status","text":"can map EER species dataframe onto 2D interactive 3D space. object can manipulated positioned user order best visualize respective ecological statuses.","code":"tree_map <- build_treemap(eco_stat_df)  figure <- plot_EER_status(data_frame = eco_stat_df, fun_dist = \"fun_dist\", evol_dist = \"mean_evol_dist\", range_size = \"range_size\")"},{"path":"https://anytko.github.io/GeoFunPhy/reference/avg_evol_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average evolutionary distinctiveness across multiple time scales — avg_evol_dist","title":"Calculate average evolutionary distinctiveness across multiple time scales — avg_evol_dist","text":"function calculates average evolutionary distinctiveness list species across distinct time slices.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/avg_evol_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average evolutionary distinctiveness across multiple time scales — avg_evol_dist","text":"","code":"avg_evol_dist(   phy,   data_frame,   taxon = NULL,   time_slices = c(25, 50, 75, 100, 115),   num_cores = 1 )"},{"path":"https://anytko.github.io/GeoFunPhy/reference/avg_evol_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average evolutionary distinctiveness across multiple time scales — avg_evol_dist","text":"phy rooted, time-calibrated (branch lengths representative time) phylogenetic tree used calculate evolutionary distinctiveness. data_frame data frame containing species data \"species_name\" column. taxon character vector specifying taxa (species) interest. Default NULL. time_slices numeric vector specifying desired time slices consider. Default 25 MYA, 50 MYA, 75 MYA, 100MYA, 115MYA. adjusted based time-extent phylogeny; default times based large phylogeny Angiosperms. chosen time slices reflected utilized phylogeny, error occur. num_cores Number CPU cores use parallel processing. Default 1. recommend utilizing many cores possible.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/avg_evol_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate average evolutionary distinctiveness across multiple time scales — avg_evol_dist","text":"data frame species names corresponding evolutionary distinctiveness values. Species included phylogeny return NA.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/avg_evol_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate average evolutionary distinctiveness across multiple time scales — avg_evol_dist","text":"Many species evolutionarily distinct within genera evolutionarily indistinct across larger phylogenetic extents. function accounts differences evolutionary distinctiveness different time extents calculation evolutionary distinctiveness five distinct phylogenetic extents.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"Build dataframe trait data various plant species interest using LEDA trait database.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"","code":"build_trait_data_LEDA(columns_to_select, genera = NULL)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"columns_to_select character vector specifying traits select. Options include: SLA (specific leaf area mm^2/mg), seed_mass (mg), leaf_mass (mg), canopy_height (m) genera character vector specifying genera interest filtered. Default NULL.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"dataframe including mean trait data species species choice respective columns titled trait name.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"function reads trait data four different data files, including SLA (Specific Leaf Area), seed mass, leaf mass, canopy height. combines data frames single data frame based species name.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"kleyer2008GeoFunPhy","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_trait_data_LEDA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_treemap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Treemap from Rarity Classification Data — build_treemap","title":"Plot a Treemap from Rarity Classification Data — build_treemap","text":"function creates treemap visualization dataframe containing 'classifications' column. counts occurrences classification generates ggplot-based treemap. user can choose display treemap immediately (plot = FALSE) return ggplot object customization (plot = TRUE).","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_treemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Treemap from Rarity Classification Data — build_treemap","text":"","code":"build_treemap(data_frame, plot = TRUE)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_treemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Treemap from Rarity Classification Data — build_treemap","text":"data_frame dataframe containing classifications' column. column used categorize data must exist dataframe. plot logical value indicating whether display plot immediately (plot = FALSE). Defaults TRUE. TRUE plot stored ggplot object.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_treemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Treemap from Rarity Classification Data — build_treemap","text":"ggplot object representing treemap plot TRUE NULL plot FALSE printing plot.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/build_treemap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Treemap from Rarity Classification Data — build_treemap","text":"","code":"# Example usage: df <- data.frame(classifications = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"C\")) tree <- build_treemap(df, plot = TRUE) tree #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values. #> Warning: No shared levels found between `names(values)` of the manual scale and the #> data's fill values."},{"path":"https://anytko.github.io/GeoFunPhy/reference/calc_range_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate range sizes for multiple species — calc_range_size","title":"Calculate range sizes for multiple species — calc_range_size","text":"function calculates range sizes (sq km) multiple species retrieving occurrence data GBIF, generating convex hulls, clipping continent boundaries. uses parallel processing handle multiple species efficiently.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/calc_range_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate range sizes for multiple species — calc_range_size","text":"","code":"calc_range_size(   data_frame,   num_cores = 1,   min_points = 5,   min_distance = 1,   gbif_limit = 2000,   continent_file = NULL )"},{"path":"https://anytko.github.io/GeoFunPhy/reference/calc_range_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate range sizes for multiple species — calc_range_size","text":"data_frame data.frame containing scienfic names species column named species_name. num_cores number cores use parallel processing. Default 1 (parallel processing). min_points minimum number points required form range cluster. Default 5. min_distance minimum distance points range cluster. Default 1 epsilon (eps). gbif_limit maximum number GBIF records retrieve per species. Default 2000. continent_file URL GeoJSON shape (.shp & .shx) file containing country continent data. Default NULL - NULL, GeoJSON file Natural Earth used.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/calc_range_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate range sizes for multiple species — calc_range_size","text":"data.frame two columns: species_name range_size. range_size column represents size range species square kilometers.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/calc_range_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate range sizes for multiple species — calc_range_size","text":"","code":"# Generate a test dataframe with species Abies cephalonica test_data <- data.frame(species_name = c(\"Betula_humilis\"))  # Generate range sizes for each speices range_size <- calc_range_size(data_frame = test_data, min_points = 4) #> Processing species:Betula_humilis print(range_size) #>     species_name range_size #> 1 Betula_humilis   172624.7"},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_EER_status_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Eco-Evolutionary Rarity (EER) Status with K Parameter — check_EER_status_k","title":"Check Eco-Evolutionary Rarity (EER) Status with K Parameter — check_EER_status_k","text":"function categorizes species eco-evolutionary status based provided trait data custom thresholds based specified optimal K clusters.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_EER_status_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Eco-Evolutionary Rarity (EER) Status with K Parameter — check_EER_status_k","text":"","code":"check_EER_status_k(   data_frame,   range_size_col,   mean_evol_dist_col,   fun_dist_col,   range_size_k,   mean_evol_dist_k,   fun_dist_k )"},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_EER_status_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Eco-Evolutionary Rarity (EER) Status with K Parameter — check_EER_status_k","text":"data_frame data frame containing scaled (typically using median median absolute deviation) values range size, evolutionary distinctiveness, functional distinctiveness. range_size_col column within data frame corresponding range size (km^2) species; z transformed (typically using median meadian absolute deviation) ecological status classification. Use name column \"\". mean_evol_dist_col column within data frame corresponding evolutionary distinctivess species; z transformed (typically using median meadian absolute deviation) ecological status classification. Use name column \"\". fun_dist_col column within data frame corresponding functional distinctivess respective species. Use name column \"\". range_size_K optimal number clusters (K) range size. mean_evol_dist_K optimal number clusters (K) mean evolutionary disctinctiveness. fun_dist_K optimal number clusters (K) functional disctinctiveness.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_EER_status_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Eco-Evolutionary Rarity (EER) Status with K Parameter — check_EER_status_k","text":"data frame additional column \"classifications\" indicating ecological status species.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_biomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Species Convex Hulls Against Biome Data — check_biomes","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"function checks biomes intersected convex hulls species distributions. default, function uses preloaded biome shapefile containing four biomes: Humid Tropics, Dry Tropics, Temperate, Boreal. Users can also provide biome data sf object.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_biomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"","code":"check_biomes(convex_hulls, biome_sf = NULL)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_biomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"convex_hulls named list convex hulls species. element list contain list sf polygon objects representing convex hulls species' distributions. biome_sf optional sf object representing biome polygons. provided, default biome shapefile (biomes.shp) package used. default biomes : Humid Tropics Dry Tropics Temperate Boreal","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_biomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"dataframe row corresponds species, column (except species_name) represents biome. value 1 cell indicates species' convex hull intersects respective biome.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_biomes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"CRS provided biome_sf convex_hulls set, function automatically assign transform EPSG:4326 (WGS84).","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_continents.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Range Intersections with Continent Polygons — check_continents","title":"Check Range Intersections with Continent Polygons — check_continents","text":"function checks whether polygons representing species ranges intersect polygons representing continents. returns dataframe indicating species ranges intersect continents.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_continents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Range Intersections with Continent Polygons — check_continents","text":"","code":"check_continents(convex_hulls, continent_sf)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_continents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Range Intersections with Continent Polygons — check_continents","text":"convex_hulls nested list convex hulls species ranges. Can generated using GeoFunPhy::get_range_convex_hulls() clip_polygons_to_land(). continent_sf sf object containing polygons representing continents. Can generated using GeoFunPhy::get_continent_sf()","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_continents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Range Intersections with Continent Polygons — check_continents","text":"dataframe species names rows continent names columns. cell contains 1 corresponding species range intersects continent polygon, 0 otherwise.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_continents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Range Intersections with Continent Polygons — check_continents","text":"function assumes species range polygons continent polygons coordinate reference system. range continent polygons invalid, automatically made valid using st_make_valid. function returns dataframe row corresponds species, column corresponds continent. value 1 indicates species range intersects continent polygon, 0 indicates intersection.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/check_continents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Range Intersections with Continent Polygons — check_continents","text":"","code":"# Generate a dataframe for species Abies cephalonica and Abies firma test_data <- data.frame(species_name = c(\"Abies_cephalonica\", \"Abies_firma\"))  # Get continent bounds continent_bounds <- get_continent_sf()  # Find convex hulls for Abies cephalonica and Abies firma test_hulls <- GeoFunPhy::get_range_convex_hulls(test_data) #> Processing species:Abies_cephalonica #> Processing species:Abies_firma  # Clip convex hulls to continent bounds clipped_polys <- clip_polygons_to_land(test_hulls, continent_bounds)  # Check intersections with continents - Abies cephalonica is found in Europe and Abies firma is found in Asia intersections <- check_continents(convex_hulls = clipped_polys, continent_sf = continent_bounds) print(intersections) #>   Africa Antarctica Asia Europe North America Oceania Seven seas (open ocean) #> 1      0          0    0      1             0       0                       0 #> 2      0          0    1      0             0       0                       0 #>   South America      species_name #> 1             0 Abies_cephalonica #> 2             0       Abies_firma"},{"path":"https://anytko.github.io/GeoFunPhy/reference/clip_polygons_to_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip species range polygons to land boundaries — clip_polygons_to_land","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"function uses continent GeoJSON shape file (.shp & .shx) file clip range polygons land boundaries.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/clip_polygons_to_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"","code":"clip_polygons_to_land(convex_hulls, continent_sf)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/clip_polygons_to_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"convex_hulls nested list sf objects representing convex hulls species range. continent_sf file continent boundaries. recommend using Natural Earth's GeoJSON shape files.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/clip_polygons_to_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"nested list clipped range polygons","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/clip_polygons_to_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"clipping polygons species points touching land (.e. oceanic polygon) function return error. error silenced oceanic polygon removed clipped polygon list.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/compute_wcss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Within-Cluster Sum of Squares (WCSS) Compute the Within-Cluster Sum of Squares (WCSS) for a given variable and a range of cluster values (k) using k-means clustering. — compute_wcss","title":"Compute Within-Cluster Sum of Squares (WCSS) Compute the Within-Cluster Sum of Squares (WCSS) for a given variable and a range of cluster values (k) using k-means clustering. — compute_wcss","text":"Compute Within-Cluster Sum Squares (WCSS) Compute Within-Cluster Sum Squares (WCSS) given variable range cluster values (k) using k-means clustering.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/compute_wcss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Within-Cluster Sum of Squares (WCSS) Compute the Within-Cluster Sum of Squares (WCSS) for a given variable and a range of cluster values (k) using k-means clustering. — compute_wcss","text":"","code":"compute_wcss(data, variable, k_values, seed = 42)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/compute_wcss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Within-Cluster Sum of Squares (WCSS) Compute the Within-Cluster Sum of Squares (WCSS) for a given variable and a range of cluster values (k) using k-means clustering. — compute_wcss","text":"data data frame containing data clustering. variable variable data frame used clustering. Use name column \"\". k_values vector integers specifying number clusters (k) considered.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/compute_wcss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Within-Cluster Sum of Squares (WCSS) Compute the Within-Cluster Sum of Squares (WCSS) for a given variable and a range of cluster values (k) using k-means clustering. — compute_wcss","text":"numeric vector containing WCSS values value k.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/compute_wcss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Within-Cluster Sum of Squares (WCSS) Compute the Within-Cluster Sum of Squares (WCSS) for a given variable and a range of cluster values (k) using k-means clustering. — compute_wcss","text":"function computes Within-Cluster Sum Squares (WCSS) value k provided k_values parameter using k-means clustering. returns numeric vector element represents WCSS value corresponding value k.","code":""},{"path":[]},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/define_custom_k_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Custom K Ranges — define_custom_k_ranges","title":"Define Custom K Ranges — define_custom_k_ranges","text":"Perform k-means clustering variable define custom ranges based cluster centers.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/define_custom_k_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Custom K Ranges — define_custom_k_ranges","text":"","code":"define_custom_k_ranges(data, variable, k)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/define_custom_k_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Custom K Ranges — define_custom_k_ranges","text":"data data frame containing variable clustering. variable name variable clustering. Use name column \"\". k number clusters used k-means clustering.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/define_custom_k_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Custom K Ranges — define_custom_k_ranges","text":"list containing: data frame additional column indicating cluster label observation.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/define_custom_k_ranges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Custom K Ranges — define_custom_k_ranges","text":"function performs k-means clustering variable provided data frame defines custom ranges based cluster centers. returns list containing modified data frame additional column indicating cluster label observation, list custom ranges based cluster centers.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/elbow_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Elbow Plot — elbow_plot","title":"Display Elbow Plot — elbow_plot","text":"Plot Within-Cluster Sum Squares (WCSS) number clusters (k) determine optimal value k using Elbow Method.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/elbow_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Elbow Plot — elbow_plot","text":"","code":"elbow_plot(data, variable, k_max = 10, ggplot = FALSE)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/elbow_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Elbow Plot — elbow_plot","text":"data data frame containing data elbow plot displayed. variable variable data frame elbow plot generated. Use name column \"\". k_max maximum number clusters (k) consider. Default 10. ggplot Logical indicator. Default FALSE. FALSE function returns R base plot. TRUE function returns ggplot.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/elbow_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display Elbow Plot — elbow_plot","text":"Elbow Method helps finding optimal number clusters (k) plotting Within-Cluster Sum Squares (WCSS) different values k. \"elbow\" point plot, rate decrease WCSS slows , indicates optimal value k. often visually determined finding \"elbow\" plot.","code":""},{"path":[]},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/fun_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relative functional distinctiveness for species based on trait data — fun_dist","title":"Calculate relative functional distinctiveness for species based on trait data — fun_dist","text":"function calculates relative functional distinctiveness (FD) species based trait data.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/fun_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relative functional distinctiveness for species based on trait data — fun_dist","text":"","code":"fun_dist(data_frame, trait_columns)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/fun_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relative functional distinctiveness for species based on trait data — fun_dist","text":"data_frame data frame containing species data \"species_name\" column. trait_columns character vector trait columns used calculating FD.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/fun_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate relative functional distinctiveness for species based on trait data — fun_dist","text":"data frame species names functional distinctiveness (fun_dist) values.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/fun_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate relative functional distinctiveness for species based on trait data — fun_dist","text":"function scales trait data (median) found dataframe consiting multiple traits (2+), computes Euclidean distances, calculates relative functional distinctiveness species. measure functional distinctiveness relative species analyzed, species can functionaly distinct within small subset species, functionally indistinct across larger tree life.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_continent_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get continent spatial data from a GeoJSON file — get_continent_sf","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"function reads GeoJSON file given URL, extracts continent information, returns sf object continent polygons.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_continent_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"","code":"get_continent_sf(url = NULL)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_continent_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"url Optional URL GeoJSON file containing country continent data. Default NULL - NULL package uses embeded continent boundaries Natural Earth.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_continent_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"sf object containing polygons representing continents. object includes column continent names corresponding geometries.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_continent_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"","code":"# Get continent data from a GeoJSON file continent_sf <- get_continent_sf() print(continent_sf) #> Simple feature collection with 8 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -180 ymin: -89.99893 xmax: 180 ymax: 83.59961 #> Geodetic CRS:  WGS 84 #>                 continent                       geometry #> 1                  Africa MULTIPOLYGON (((-3.025879 5... #> 2              Antarctica MULTIPOLYGON (((-163.6018 -... #> 3                    Asia MULTIPOLYGON (((54.12949 12... #> 4                  Europe MULTIPOLYGON (((-52.00293 4... #> 5           North America MULTIPOLYGON (((-155.9884 1... #> 6                 Oceania MULTIPOLYGON (((-176.2208 -... #> 7 Seven seas (open ocean) MULTIPOLYGON (((-26.45103 -... #> 8           South America MULTIPOLYGON (((-74.66597 -..."},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Phylogeny of Angiosperms — get_phy_angio","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"Retreive seed plant phylogenies described Smith & Brown 2018 FePhyFoFum github","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"","code":"get_phy_angio(phy_choice)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"phy_choice Choice seed phylogeny includes ALLMB, ALLOTB, GBMB, GBOTB","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"rooted phylogenetic object used comparative methods","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"function downloads pre-constructed phylogenetic tree 'big_seed_plant_trees' repository GitHub. available tree choices follows: 'ALLMB': GenBank Open Tree Life taxa backbone provided Magallón et al. 2015 'ALLOTB': GenBank Open Tree Life taxa backbone provided Open Tree Life version 9.1 'GBMB': GenBank taxa backbone provided Magallón et al. 2015 'GBOTB': GenBank taxa backbone provided Open Tree Life version 9.1","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"smithbrown2018GeoFunPhy kleyer2008GeoFunPhy Magallon2015GeoFunPhy","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_phy_angio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"","code":"ALLMB_phy <- get_phy_angio(phy_choice = \"ALLMB\")  ALLOTB_phy <- get_phy_angio(phy_choice = \"ALLOTB\")  GMBM_phy <- get_phy_angio(phy_choice = \"GBMB\")  GBOTB_phy <- get_phy_angio(phy_choice = \"GBOTB\")"},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_range_convex_hulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"function gathers, cleans, clusters GBIF data create convex hulls species ranges.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_range_convex_hulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"","code":"get_range_convex_hulls(   data_frame,   species_name = NULL,   num_cores = 1,   min_points = 5,   min_distance = 1,   gbif_limit = 2000 )"},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_range_convex_hulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"data_frame dataframe containing scientific names species. Must include column named species_name. species_name optional character vector species names process. Default NULL. NULL, species dataframe processed. num_cores number cores use parallel processing. Default 1 (parallel processing). min_points minimum number points required form range cluster. Default 5. min_distance minimum distance points range cluster. Default 1 epsilon (eps). gbif_limit maximum number GBIF records retrieve per species. Default 2000.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_range_convex_hulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"nested list convex hull polygons species. species name corresponds list sf objects representing convex hulls.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/get_range_convex_hulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"","code":"# Generate a test dataframe with species Abies cephalonica test_data <- data.frame(species_name = c(\"Abies_cephalonica\")) # Retrieve the unclipped range polygons  unclipped_hulls <- get_range_convex_hulls(test_data) #> Processing species:Abies_cephalonica print(unclipped_hulls) #> $Abies_cephalonica #> $Abies_cephalonica$`1` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 22.17968 ymin: 36.94886 xmax: 23.90966 ymax: 38.76327 #> Geodetic CRS:  WGS 84 #> POLYGON ((22.90655 36.94886, 22.98478 36.95195,... #>  #> $Abies_cephalonica$`2` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 20.57506 ymin: 38.13723 xmax: 20.67796 ymax: 38.29078 #> Geodetic CRS:  WGS 84 #> POLYGON ((20.67278 38.13723, 20.67796 38.15113,... #>  #> $Abies_cephalonica$`3` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 14.23305 ymin: 56.12064 xmax: 14.23323 ymax: 56.12079 #> Geodetic CRS:  WGS 84 #> POLYGON ((14.23305 56.12065, 14.23306 56.12064,... #>  #> $Abies_cephalonica$`4` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 0.2926 ymin: 46.62728 xmax: 0.94663 ymax: 47.43229 #> Geodetic CRS:  WGS 84 #> POLYGON ((0.2926 46.86807, 0.41926 46.62728, 0.... #>  #> $Abies_cephalonica$`5` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1.99685 ymin: 42.39377 xmax: 7.40942 ymax: 47.60943 #> Geodetic CRS:  WGS 84 #> POLYGON ((1.99685 42.44291, 2.46658 42.39377, 6... #>  #> $Abies_cephalonica$`6` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 1.20039 ymin: 44.83076 xmax: 1.96516 ymax: 45.53002 #> Geodetic CRS:  WGS 84 #> POLYGON ((1.20039 44.88326, 1.35315 44.83076, 1... #>  #> $Abies_cephalonica$`7` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -1.07394 ymin: 42.86369 xmax: -0.59664 ymax: 42.9991 #> Geodetic CRS:  WGS 84 #> POLYGON ((-0.59664 42.86369, -0.84351 42.98312,... #>  #> $Abies_cephalonica$`8` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 2.3259 ymin: 47.55198 xmax: 2.68092 ymax: 48.84401 #> Geodetic CRS:  WGS 84 #> POLYGON ((2.35995 48.84401, 2.3259 47.55198, 2.... #>  #> $Abies_cephalonica$`9` #> Geometry set for 1 feature  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 6.34018 ymin: 48.39447 xmax: 7.4431 ymax: 48.7513 #> Geodetic CRS:  WGS 84 #> POLYGON ((6.34018 48.7513, 6.80616 48.40738, 7.... #>  #>"},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Interactive 3d Scatter Plot — plot_EER_status","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"Create interactive scatter plot depicting ecological status species 3d space","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"","code":"plot_EER_status(data_frame, fun_dist, evol_dist, range_size)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"data_frame data frame containing species data. fun_dist column within data frame corresponding functional distinctivess species evol_dist column within data frame corresponding evolutionary distinctivess species; z transformed (typically using median meadian absolute deviation) ecological status classification. range_size column within data frame corresponding range size (km^2) species; z transformed (typically using median meadian absolute deviation) ecological status classification.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"interactive 3d rgl object visualizes three dimensions rarity resultant ecological status. capture still image scatter plot rgl::rgl.snapshot() recommended.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"function checks specified fun_dist, evol_dist, range_size columns exists data frame required columns 'classifications,' 'species_name' present. assigns colors data points based classifications displays 3D scatter plot interactively.","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_EER_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Interactive 3d Scatter Plot — plot_EER_status","text":"","code":"# Create dataframe including species names, range size, evolutionary distinctiveness, functional distinctiveness, and their respective eco-evolutionary classifications  species_names <- c(\"Acer_campestre\", \"Acer_monspessulanum\", \"Acer_negundo\", \"Acer_opalus\", \"Acer_platanoides\", \"Acer_pseudoplatanus\", \"Acer_saccharinum\") FD_values <- runif(min = -2, max = 2, n=7) range_values <- runif(min = -2, max = 2, n=7) evol_dist_values <- runif(min = -2, max = 2, n=7) classification <- c(\"Common\", \"Common\", \"Endemic\", \"Keystone\", \"Competitively Rare\", \"Common\", \"Adaptable Survivor\")  maple_data_figure <- data.frame(species_name = species_names, fun_dist = FD_values, range_size = range_values, evol_dist = evol_dist_values, classifications = classification)  # Plot the species' classifications in 3D space interactive_plot <- plot_EER_status(data_frame = maple_data_figure, fun_dist = \"fun_dist\", range_size = \"range_size\", evol_dist = \"evol_dist\")"},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_clipped_hulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clipped convex hulls on map — plot_clipped_hulls","title":"Plot clipped convex hulls on map — plot_clipped_hulls","text":"Plot clipped convex hulls map","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_clipped_hulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clipped convex hulls on map — plot_clipped_hulls","text":"","code":"plot_clipped_hulls(clipped_convex_hulls)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_clipped_hulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clipped convex hulls on map — plot_clipped_hulls","text":"clipped_convex_hulls list clipped convex hulls species.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_clipped_hulls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot clipped convex hulls on map — plot_clipped_hulls","text":"function plots list clipped convex hulls onto world leaflet map.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_clipped_hulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot clipped convex hulls on map — plot_clipped_hulls","text":"","code":"data <- data.frame(species_name = c(\"Eucalyptus gunnii\", \"Eucalyptus tenuiramis\", \"Eucalyptus globulus\")) continent_bounds <- get_continent_sf() euc_convex_hulls <- get_range_convex_hulls(data) #> Processing species:Eucalyptus gunnii #> Processing species:Eucalyptus tenuiramis #> Processing species:Eucalyptus globulus euc_clipped_hulls <- clip_polygons_to_land(euc_convex_hulls, continent_bounds) plot_clipped_hulls(clipped_convex_hulls = euc_clipped_hulls)  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[147.5404595,147.5358398,147.5738281,147.625975,147.903405,148.126647,147.830666,145.786067,145.558604,145.535709,146.395138,146.900368,146.9861015,146.9848633,146.9969727,147.0348487,147.2683813,147.2807617,147.325,147.3426758,147.3476562,147.3019531,147.2979492,147.4080078,147.4318691,147.5404595],\"lat\":[-42.91183669999999,-42.8780273,-42.8457031,-42.8571542,-42.260698,-41.72193499999999,-41.32903599999999,-41.13377,-41.292382,-41.51457199999999,-43.001717,-43.248512,-43.2034179,-43.18984380000001,-43.1563477,-43.17777780000001,-43.0549444,-43.03173829999999,-43.0134766,-42.9644531,-42.9265625,-42.8405273,-42.790918,-42.8938477,-42.9689531,-42.91183669999999]}]],[[{\"lng\":[-4.189428,-3.896471,-3.543458199999999,-3.5258789,-3.4854492,-3.404589799999999,-2.9994141,-2.9008789,-2.7769531,-2.6588379,-2.6511384,-0.472949,-0.214545,-2.138279,-2.382782,-2.810494,-3.0241462,-2.9843262,-2.9250977,-2.9957031,-3.0594727,-3.0645996,-2.9699707,-2.9130859,-2.8454102,-2.79375,-2.7495117,-2.8641602,-2.9185547,-3.064746099999999,-3.1655762,-3.0975586,-3.3261719,-3.3807185,-4.040810099999999,-3.9803223,-4.0505371,-4.0997559,-4.137732499999998,-4.1572203,-4.0910156,-4.1582197,-4.1601287,-4.115283199999999,-3.9983398,-3.943652299999999,-3.890771499999999,-3.7626953,-3.5623535,-3.2931152,-3.2587891,-3.0803711,-2.9785156,-2.7421387,-2.6676758,-2.5393555,-2.4330566,-2.5902832,-2.687207,-2.7908203,-2.88125,-3.042041,-3.1359863,-3.2557617,-3.3750977,-3.607910199999999,-3.842334,-4.158398399999999,-4.170869599999999,-4.189428],\"lat\":[50.554154,50.289474,50.39621409999999,50.4281738,50.5479492,50.6324219,50.7166016,50.7224121,50.7055664,50.6697266,50.666024,51.324641,51.490135,53.84715899999999,53.990433,54.024261,53.7692604,53.7467285,53.73276370000001,53.66254879999999,53.5862305,53.5128418,53.389209,53.3502441,53.3319336,53.33071289999999,53.3102051,53.2925781,53.3053711,53.42685549999999,53.3946777,53.2603027,53.347168,53.3436801,52.5558402,52.541748,52.4751465,52.3931152,52.3419439,51.6679956,51.65991209999999,51.6334354,51.5674159,51.5664062,51.5821289,51.5975098,51.5916504,51.5399414,51.4138184,51.3904297,51.3984863,51.4958008,51.5388672,51.5811035,51.622998,51.6952148,51.74072270000001,51.6085937,51.5372559,51.4748047,51.4056641,51.24858400000001,51.2050293,51.1941406,51.1969727,51.2285645,51.2309082,51.2013184,51.1959619,50.554154]}]],[[{\"lng\":[2.458537,3.06073,2.64924,2.458537],\"lat\":[41.77556800000001,42.49481,43.48479,41.77556800000001]}]],[[{\"lng\":[5.851862100000001,6.030566400000001,6.115917999999999,6.305371099999999,6.494043,6.5702148,6.6572266,6.6874023,6.716601600000001,6.8647461,6.9370536,7.02482,6.653860000000001,5.15839,5.2111326,5.3202148,5.3582778,5.6319865,5.671581999999999,5.7154009,5.851862100000001],\"lat\":[43.09849020000001,43.1009766,43.0723633,43.1387207,43.16928710000001,43.1990723,43.26166989999999,43.3345703,43.37358400000001,43.43833009999999,43.4887424,43.5895,43.60261999999999,43.37260999999999,43.35176159999999,43.3449219,43.2935971,43.1854039,43.177832,43.1524314,43.09849020000001]}]],[[{\"lng\":[-1.57572,-0.5877499999999999,-1.53497,-1.57572],\"lat\":[47.50117,47.44176,47.51804,47.50117]}]],[[{\"lng\":[0.512061,1,1.000261,1.372033,1.7322739,1.7161133,1.6925021,1.341272,1.311614,0.512061],\"lat\":[52.40029699999999,52,51.999941,52.10905099999999,52.6186857,52.6772461,52.70765319999999,52.865415,52.86624699999999,52.40029699999999]}]]],null,\"Eucalyptus gunnii\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#E41A1C\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#E41A1C\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[147.3507113,147.3560547,147.3424805,147.3125,147.2838867,147.2339844,147.2197266,147.1984375,147.184668,147.1630859,147.1046875,147.1049805,147.1330595,147.3507113],\"lat\":[-43.4087326,-43.39697269999999,-43.3462891,-43.28027340000001,-43.2789063,-43.3304687,-43.3713867,-43.3791992,-43.4078125,-43.4302734,-43.4128906,-43.4311523,-43.4708562,-43.4087326]}],[{\"lng\":[146.9367479,146.9546875,147.0046875,147.0359375,147.0773438,146.9875,146.9848633,146.9969727,147.1728516,147.2450195,147.2597656,147.2597656,147.2807617,147.325,147.3426758,147.3476562,147.3019531,147.2979492,147.4080078,147.4523438,147.5367188,147.5490234,147.5358398,147.5738281,147.693457,147.8,147.8074219,147.8003906,147.7739258,147.6873047,147.6479492,147.6989258,147.7858398,147.8385742,147.9454102,147.9808594,147.9577148,147.9150391,147.9121094,147.9244141,147.9735352,148.009375,148.0048828,148.0227539,148.0666016,148.1275391,148.15625,148.1412109,148.1671875,148.2136719,148.2416016,148.2043945,148.1831055,148.2557617,148.2771484,148.2845703,148.2769531,148.290332,148.3142653,148.3346321,148.3310547,148.3408203,148.3280273,148.3014648,148.3016602,148.315099,148.3118741,148.2963898,148.248188,147.638027,147.380507,146.373933,146.309902,146.250559,146.231034,146.2820126,146.4131836,146.5485352,146.5809353,146.930847,146.9367479],\"lat\":[-43.5268887,-43.5024414,-43.3696289,-43.319043,-43.2758789,-43.21875,-43.18984380000001,-43.1563477,-43.2558594,-43.21591799999999,-43.1264648,-43.0710937,-43.03173829999999,-43.0134766,-42.9644531,-42.9265625,-42.8405273,-42.790918,-42.8938477,-43.03339839999999,-42.9964844,-42.9745117,-42.8780273,-42.8457031,-42.8719727,-42.928125,-42.95410159999999,-42.9802734,-43.003418,-42.9798828,-43.0206055,-43.1225586,-43.22001950000001,-43.19511719999999,-43.1818359,-43.1570312,-42.96044919999999,-42.81640619999999,-42.6584961,-42.5724609,-42.5058594,-42.43593750000001,-42.3451172,-42.2594727,-42.17031250000001,-42.1037109,-42.08828129999999,-42.06982419999999,-42.0123047,-41.9700195,-42.02187499999999,-42.0419922,-42.0647461,-42.10263669999999,-42.1364258,-42.17343750000001,-42.2194336,-42.25498049999999,-42.2588646,-42.1766121,-42.1591797,-42.1111328,-42.0737305,-42.0399414,-42.0041992,-41.9311254,-41.91240690000001,-41.8507388,-41.746619,-41.584906,-41.594423,-42.2231,-42.62692,-43.199276,-43.479186,-43.5156284,-43.5195313,-43.50888670000001,-43.528898,-43.528573,-43.5268887]}],[{\"lng\":[147.3972656,147.3525391,147.3273438,147.3191406,147.2960938,147.3375977,147.3488281,147.371875,147.4345703,147.3972656],\"lat\":[-43.1182617,-43.0802734,-43.1146484,-43.1453125,-43.1617187,-43.1833008,-43.2324219,-43.2408203,-43.2407227,-43.1182617]}],[{\"lng\":[148.1005859,148.1695313,148.1427734,148.0725586,148.0227539,148.0308594,148.0296875,148.0481445,148.1042969,148.1005859],\"lat\":[-42.6805664,-42.65175780000001,-42.615918,-42.5931641,-42.64042970000001,-42.66337889999999,-42.7148437,-42.7192383,-42.7104492,-42.6805664]}]]],null,\"Eucalyptus tenuiramis\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#377EB8\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#377EB8\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-119.884681,-119.8822025,-119.8533203,-119.7131836,-119.6740186,-119.884681],\"lat\":[34.42316900000001,34.4202553,34.4119629,34.3996582,34.4063702,34.42316900000001]}],[{\"lng\":[-119.5548332,-119.4136719,-119.2676758,-119.2358398,-119.14375,-118.8320312,-118.5988281,-118.5062012,-118.3929687,-118.4104492,-118.2941895,-118.2644043,-118.1619141,-118.0805176,-117.9520996,-117.7885254,-117.4674316,-117.3188477,-117.2629883,-117.2557617,-117.2707031,-117.2666632,-117.165733,-116.607912,-118.253708,-119.046663,-119.5548332],\"lat\":[34.396866,34.3385742,34.25742189999999,34.1641113,34.1120117,34.0244629,34.0350098,34.01738280000001,33.85830079999999,33.7439453,33.7123047,33.7585938,33.7506836,33.722168,33.6196289,33.5384766,33.2955078,33.1000488,32.9388672,32.8733887,32.80625,32.78515959999999,32.733372,33.889705,34.251767,34.356343,34.396866]}],[{\"lng\":[-118.2995306,-118.3479492,-118.3916992,-118.554834,-118.5675521,-118.335093,-118.2995306],\"lat\":[33.3151278,33.3857422,33.4150879,33.4770996,33.4658277,33.333375,33.3151278]}],[{\"lng\":[-119.5587938,-119.5691406,-119.5696774,-119.5587938],\"lat\":[34.0400641,34.05297850000001,34.0528586,34.0400641]}]],[[{\"lng\":[147.845597,147.9511029,147.9150391,147.9121094,147.9244141,147.9735352,148.009375,148.0048828,148.0227539,148.0666016,148.1275391,148.15625,148.1412109,148.1671875,148.2136719,148.2416016,148.2043945,148.1831055,148.2557617,148.2771484,148.2845703,148.2769531,148.2873701,148.3316967,148.3408203,148.3280273,148.3014648,148.3016602,148.3157227,148.2875977,148.296582,148.2869141,148.2898438,148.312207,148.3071887,146.743313,146.913903,146.9835656,147.0046875,147.0359375,147.0773438,146.9875,146.9848633,146.9969727,147.1728516,147.2450195,147.2597656,147.2597656,147.2807617,147.325,147.3426758,147.3476562,147.3019531,147.2979492,147.4080078,147.4523438,147.5367188,147.5490234,147.5358398,147.5738281,147.693457,147.8,147.8074219,147.8003906,147.7739258,147.6873047,147.6479492,147.6989258,147.753583,147.845597],\"lat\":[-43.154944,-42.938132,-42.81640619999999,-42.6584961,-42.5724609,-42.5058594,-42.43593750000001,-42.3451172,-42.2594727,-42.17031250000001,-42.1037109,-42.08828129999999,-42.06982419999999,-42.0123047,-41.9700195,-42.02187499999999,-42.0419922,-42.0647461,-42.10263669999999,-42.1364258,-42.17343750000001,-42.2194336,-42.24711089999999,-42.1560208,-42.1111328,-42.0737305,-42.0399414,-42.0041992,-41.92773439999999,-41.81572269999999,-41.64619140000001,-41.5549805,-41.4650391,-41.349707,-41.2514796,-42.96637099999999,-43.447617,-43.4257339,-43.3696289,-43.319043,-43.2758789,-43.21875,-43.18984380000001,-43.1563477,-43.2558594,-43.21591799999999,-43.1264648,-43.0710937,-43.03173829999999,-43.0134766,-42.9644531,-42.9265625,-42.8405273,-42.790918,-42.8938477,-43.03339839999999,-42.9964844,-42.9745117,-42.8780273,-42.8457031,-42.8719727,-42.928125,-42.95410159999999,-42.9802734,-43.003418,-42.9798828,-43.0206055,-43.1225586,-43.1838484,-43.154944]}],[{\"lng\":[147.3292452,147.3125,147.2838867,147.2339844,147.2274887,147.3292452],\"lat\":[-43.3171456,-43.28027340000001,-43.2789063,-43.3304687,-43.3491103,-43.3171456]}],[{\"lng\":[148.1126502,148.0725586,148.0227539,148.0308594,148.0296875,148.0481445,148.0584031,148.1126502],\"lat\":[-42.60615620000001,-42.5931641,-42.64042970000001,-42.66337889999999,-42.7148437,-42.7192383,-42.71763259999999,-42.60615620000001]}],[{\"lng\":[147.3972656,147.3525391,147.3273438,147.3191406,147.2960938,147.3375977,147.3488281,147.371875,147.4345703,147.3972656],\"lat\":[-43.1182617,-43.0802734,-43.1146484,-43.1453125,-43.1617187,-43.1833008,-43.2324219,-43.2408203,-43.2407227,-43.1182617]}]],[[{\"lng\":[-16.88092,-16.827706,-16.763172,-16.79069,-16.867465,-16.9896059,-17.0544922,-17.1730525,-17.206859,-17.2410156,-17.2360076,-17.195233,-17.0679595,-17.0182617,-16.9198029,-16.88092],\"lat\":[32.654622,32.666408,32.745653,32.7633,32.80713499999999,32.8290942,32.8158691,32.8617141,32.8490794,32.807373,32.7938335,32.750994,32.6819929,32.662793,32.6548982,32.654622]}]],[[{\"lng\":[-7.877961999999999,-3.423968,-3.948739999999999,-4.0569209,-4.312793,-4.5230469,-5.1052734,-5.2601785,-6.074942,-6.080127,-6.2241211,-6.475683599999999,-6.6172852,-6.900683600000001,-7.060986300000001,-7.261962899999999,-7.387211400000002,-7.8252668,-7.852734399999999,-7.9071227,-8.2800765,-8.252294899999999,-8.248925800000002,-8.355468699999999,-8.421581999999999,-8.537060499999999,-8.665625000000002,-8.7270241,-9.148564,-9.1540175,-9.127197299999997,-9.0416016,-8.9271973,-8.937206999999999,-9.035058599999999,-9.0331055,-8.987793,-8.8115234,-8.799902299999999,-8.8099121,-8.812109399999999,-8.7761719,-8.730029300000002,-8.769384800000001,-8.8099609,-8.815820300000002,-8.7291992,-8.690918,-8.7724609,-8.887207000000002,-8.8783203,-8.852343800000002,-8.777148400000002,-8.8782227,-8.887597700000001,-8.8463867,-8.7554199,-8.810839800000002,-8.8056641,-8.738378899999999,-8.6746094,-8.6598145,-8.6555664,-8.673974599999999,-8.684619099999999,-8.7315918,-8.7724121,-8.8726562,-8.886621099999999,-8.8513184,-8.837841800000001,-9.004052699999999,-9.148291000000002,-9.233067400000001,-9.244667999999999,-9.203441,-9.201653300000002,-9.135790999999999,-9.0910156,-8.954296899999997,-8.867480499999997,-8.7916016,-8.938085899999999,-9.000488299999999,-8.977050799999997,-9.0214844,-9.093310499999999,-9.177832,-9.191886100000001,-9.1398238,-9.095996099999999,-8.9147949,-8.861621099999999,-8.798876999999999,-8.733984399999999,-8.6683105,-8.8811035,-8.8109375,-8.802246099999998,-8.878955099999999,-8.822656199999999,-8.7918457,-8.818554699999998,-8.8141602,-8.8800098,-8.864153999999999,-7.877961999999999],\"lat\":[37.17349799999999,43.36098200000001,43.44883799999999,43.45632740000001,43.4147461,43.4157227,43.5018555,43.5396293,43.5960356,43.5949219,43.6038574,43.57890619999999,43.59238279999999,43.58564449999999,43.5539551,43.5946289,43.68688450000001,43.7172112,43.70698240000001,43.7024734,43.5293418,43.4969238,43.43940430000001,43.3968262,43.3858398,43.3370605,43.31660160000001,43.32186110000001,43.12617499999999,42.8887209,42.8652344,42.8140137,42.79858400000001,42.7666992,42.6623535,42.5938477,42.5856445,42.640332,42.5999023,42.5623535,42.4700684,42.4348145,42.4117188,42.3581543,42.33447270000001,42.28525390000001,42.2870117,42.2741699,42.2105957,42.10527340000001,41.94687500000001,41.9269043,41.9410645,41.83208009999999,41.7645996,41.70517580000001,41.6983887,41.6519531,41.5600098,41.284668,41.1544922,41.0862793,41.02949219999999,40.9165039,40.7525391,40.6509277,40.60566410000001,40.259082,40.17944339999999,40.1518066,40.1156738,39.8205566,39.54257810000001,39.4467631,38.94165499999999,38.73388699999999,38.7258248,38.7427734,38.834668,39.0160645,39.0659668,39.07817379999999,38.9980957,38.90302730000001,38.80292969999999,38.746875,38.69667969999999,38.687793,38.6817779,38.4469922,38.4552246,38.5121094,38.5099609,38.5181641,38.4824219,38.4243164,38.4466797,38.2997559,38.1838379,37.95869139999999,37.871875,37.73281250000001,37.5924316,37.4308105,37.2753068,37.203802,37.17349799999999]}]],[[{\"lng\":[146.421845,146.460678,146.4757018,146.4666016,146.4269531,146.3366211,146.2855469,146.2162109,146.2174805,146.2925781,146.35625,146.4357422,146.5063356,146.84571,144.28861,143.819234,143.8243675,144.1015625,144.3287109,144.4478516,144.5436523,144.6652344,144.5894531,144.5177734,144.3955078,144.465332,144.5384766,144.8913086,144.9848633,145.0496094,145.1199219,145.0669922,145.0201172,144.9114258,144.7802734,144.7177734,144.8472656,144.9595703,145.1912109,145.2489258,145.2927734,145.3664063,145.4757813,145.5183594,145.5421875,145.462793,145.4242188,145.3972656,145.5353516,145.6063477,145.6918945,145.7908203,145.8655273,145.9353516,146.0181641,146.0699219,146.1583984,146.2542969,146.3320313,146.3373812,146.394012,146.421845],\"lat\":[-39.117969,-39.03143000000001,-38.9235933,-38.840332,-38.8196289,-38.89423829999999,-38.8402344,-38.7827148,-38.7274414,-38.6998047,-38.7118164,-38.7118164,-38.7037126,-36.26777699999999,-37.44529,-38.68764899999999,-38.6885063,-38.4623047,-38.3482422,-38.30371089999999,-38.284082,-38.2099609,-38.1576172,-38.1664062,-38.1369141,-38.1025391,-38.0771484,-37.8998047,-37.9522461,-38.0109375,-38.0913086,-38.2048828,-38.2583984,-38.344043,-38.34736329999999,-38.340332,-38.4363281,-38.50078129999999,-38.3835937,-38.29121089999999,-38.23759769999999,-38.2256836,-38.24374999999999,-38.31142579999999,-38.39384769999999,-38.4163086,-38.47734370000001,-38.5353516,-38.609668,-38.6568359,-38.6556641,-38.6669922,-38.7759766,-38.9017578,-38.8670898,-38.83408199999999,-38.8657227,-38.9644531,-39.07666019999999,-39.1081728,-39.11763,-39.117969]}],[{\"lng\":[145.3492188,145.3144531,145.2878906,145.2177734,145.128418,145.2708984,145.3550781,145.3492188],\"lat\":[-38.5381836,-38.4908203,-38.472168,-38.4585937,-38.5276367,-38.5197266,-38.5570312,-38.5381836]}],[{\"lng\":[145.2802734,145.3358398,145.4865234,145.4265625,145.2953125,145.2858398,145.2802734],\"lat\":[-38.39062,-38.4209961,-38.3548828,-38.3141602,-38.3189453,-38.3410156,-38.39062]}]],[[{\"lng\":[-123.0539032,-123.0461914,-122.9865234,-122.9081543,-122.8768066,-122.9775879,-122.9722029,-122.931062,-122.9047221,-122.8729492,-122.7604004,-122.6807129,-122.5841797,-122.5213379,-122.4668945,-122.4949219,-122.4838867,-122.3933594,-122.3371094,-122.2083008,-122.1537598,-122.1532894,-122.316041,-122.639095,-123.0539032],\"lat\":[38.3199139,38.3050781,38.2770996,38.196582,38.1233398,38.2273438,38.1528742,38.082088,38.041895,38.0260742,37.9456543,37.9023438,37.8740723,37.82641600000001,37.8381836,37.95356449999999,38.1088379,38.1448242,38.1358887,38.0725586,38.0655273,38.0657505,38.244086,38.456632,38.3199139]}],[{\"lng\":[-122.1354903,-122.217041,-122.3142578,-122.3854492,-122.3654785,-122.3334473,-122.2959961,-122.2222168,-122.1580566,-122.1241211,-122.0965332,-122.0705078,-122.119043,-122.1660156,-122.2286621,-122.2976074,-122.3697266,-122.3902832,-122.384082,-122.4456055,-122.514209,-122.5004395,-122.4992188,-122.4084473,-122.4001882,-122.2988026,-122.164209,-121.8806641,-121.8074219,-121.7945312,-121.7899902,-121.8351562,-121.9186523,-121.9162914,-121.6713759,-121.6643555,-121.4649902,-121.4337402,-121.3438477,-121.3072492,-121.2512685,-121.1379395,-121.0228516,-120.8996094,-120.8603027,-120.8848633,-120.8804426,-120.626704,-120.667513,-121.80083,-122.1354903],\"lat\":[38.0462471,38.040625,38.00732420000001,37.9605957,37.9211914,37.896582,37.790332,37.7320313,37.6264648,37.5437988,37.51821290000001,37.4782715,37.4828125,37.5016602,37.563916,37.5918457,37.6558594,37.7410645,37.7885254,37.797998,37.7719727,37.6527832,37.542627,37.3731445,37.2720077,37.1172997,36.99096679999999,36.93891599999999,36.85122070000001,36.8009766,36.7322754,36.6574707,36.5723633,36.5336114,36.1598857,36.1540527,35.92739259999999,35.8638672,35.7922363,35.7215408,35.660873,35.6071289,35.4807617,35.42509769999999,35.3654297,35.2749512,35.2644531,35.108537,35.28207500000001,37.679542,38.0462471]}]],[[{\"lng\":[19.03817,19.149714,18.919991,18.432983,18.5255409,18.5338867,18.6051758,18.7086914,18.7521484,18.8087891,18.8263672,18.82932139999999,19.03817],\"lat\":[-34.33088599999999,-34.20485300000001,-33.764526,-34.04857599999999,-34.0917528,-34.0859375,-34.0773438,-34.07187,-34.0826172,-34.1082031,-34.1884766,-34.2334615,-34.33088599999999]}]],[[{\"lng\":[148.618785,148.9622,149.144118,149.884247,149.873805,149.807662,149.093492,148.291622,148.192247,148.618785],\"lat\":[-37.68898100000001,-37.64087,-37.567854,-36.96878299999999,-36.468569,-35.578459,-35.17291300000001,-35.40392499999999,-36.374151,-37.68898100000001]}]],[[{\"lng\":[-78.931828,-78.808747,-78.505545,-78.57710399999999,-78.931828],\"lat\":[-0.8366169999999998,-1.74407,-1.36122,-1.161462,-0.8366169999999998]}]],[[{\"lng\":[-15.594434,-15.605805,-15.666093,-15.6827637,-15.7063127,-15.594434],\"lat\":[28.094168,28.115398,28.1528104,28.15405269999999,28.098613,28.094168]}],[{\"lng\":[-16.4388725,-16.4182129,-16.3344727,-16.1911687,-16.25673,-16.281295,-16.33588,-16.3749519,-16.5174316,-16.5568359,-16.7011675,-16.8748164,-16.8660156,-16.7947266,-16.7874047,-16.4388725],\"lat\":[28.1277182,28.151416,28.3799316,28.4786522,28.519337,28.525634,28.533862,28.5171711,28.4126953,28.4004883,28.3778169,28.3036368,28.2932617,28.1491699,28.1415656,28.1277182]}],[{\"lng\":[-17.1291694,-17.1296387,-17.1710099,-17.214489,-17.1291694],\"lat\":[28.1551442,28.155957,28.1771076,28.158534,28.1551442]}]],[[{\"lng\":[137.00147,137.071075,137.071061,136.979,136.98427,137.00147],\"lat\":[-35.84309,-35.732463,-35.732478,-35.83614,-35.84296000000001,-35.84309]}]],[[{\"lng\":[-71.99082899999999,-70.867524,-71.358491,-71.498975,-71.545603,-71.68614819999999,-71.6362793,-71.6643555,-71.7949431,-71.99082899999999],\"lat\":[-34.395969,-34.244956,-33.113251,-32.88328499999999,-33.003793,-33.44326330000001,-33.5192383,-33.6526367,-33.783454,-34.395969]}]],[[{\"lng\":[150.026031,151.004731,151.292175,149.999001,149.315342,150.026031],\"lat\":[-33.815583,-33.809472,-33.758284,-33.351871,-33.463386,-33.815583]}]],[[{\"lng\":[-74.351325,-74.17178899999999,-74.06188899999999,-74.038016,-74.01287800000001,-74.009485,-74.150789,-74.351325],\"lat\":[4.872872000000001,4.597942,4.597042,4.656270999999999,4.742313999999999,5.020587000000001,5.021903,4.872872000000001]}]],[[{\"lng\":[-68.15758799999999,-68.085944,-68.079449,-68.056934,-68.059781,-68.075897,-68.15758799999999],\"lat\":[-16.478887,-16.571784,-16.579291,-16.562287,-16.517532,-16.48937799999999,-16.478887]}]]],null,\"Eucalyptus globulus\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#4DAF4A\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#4DAF4A\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#E41A1C\",\"#377EB8\",\"#4DAF4A\"],\"labels\":[\"Eucalyptus gunnii\",\"Eucalyptus tenuiramis\",\"Eucalyptus globulus\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":0.5,\"position\":\"bottomright\",\"type\":\"unknown\",\"title\":\"Species\",\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":null}]}],\"setView\":[[0,0],2,[]],\"limits\":{\"lat\":[-43.528898,54.024261],\"lng\":[-123.0539032,151.292175]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_convex_hulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot convex hulls on map — plot_convex_hulls","title":"Plot convex hulls on map — plot_convex_hulls","text":"Plot convex hulls map","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_convex_hulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot convex hulls on map — plot_convex_hulls","text":"","code":"plot_convex_hulls(convex_hulls)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_convex_hulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot convex hulls on map — plot_convex_hulls","text":"convex_hulls list convex hulls species.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_convex_hulls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot convex hulls on map — plot_convex_hulls","text":"function plots list (polygon) convex hulls onto world leaflet map.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/plot_convex_hulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot convex hulls on map — plot_convex_hulls","text":"","code":"data <- data.frame(species_name = c(\"Eucalyptus gunnii\", \"Eucalyptus tenuiramis\", \"Eucalyptus globulus\")) euc_convex_hulls <- get_range_convex_hulls(data) #> Processing species:Eucalyptus gunnii #> Processing species:Eucalyptus tenuiramis #> Processing species:Eucalyptus globulus plot_convex_hulls(convex_hulls = euc_convex_hulls)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_poly_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot range polygons on world map — range_poly_map","title":"Plot range polygons on world map — range_poly_map","text":"Plot range polygons world map","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_poly_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot range polygons on world map — range_poly_map","text":"","code":"range_poly_map(   data_frame,   species_name = NULL,   min_points = 5,   min_distance = 1,   gbif_limit = 2000,   plot = TRUE,   clip = FALSE,   continent_sf = NULL )"},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_poly_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot range polygons on world map — range_poly_map","text":"species_name character vector species names. min_points minimum number points required form range cluster. Default 5. min_distance minimum distance points range cluster. Default 1 epsilon (eps). gbif_limit maximum number GBIF records retrieve per species. Default 2000. plot Logical indicating whether plot convex hulls map.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_poly_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot range polygons on world map — range_poly_map","text":"leaflet map species range polygons.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_poly_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot range polygons on world map — range_poly_map","text":"function combines functionality EcoStatusR::create_range_polygons() EcoStatusR::plot_convex_hulls(). Specifcally function creates convex hulls species using occurence data GBIF plots onto world leaflet map.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_poly_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot range polygons on world map — range_poly_map","text":"","code":"species_data <- data.frame(species_name = c(\"Abies alba\", \"Quercus nigra\"))  # Plotting unclipped range polygons range_poly_map(data_frame = species_data) #> Processing species:Abies alba #> Processing species:Quercus nigra #> Warning: minimal value for n is 3, returning requested palette with 3 different levels  # Plotting clipped range polygons continent_bounds <- get_continent_sf() range_poly_map(data_frame = species_data, clip = TRUE, continent_sf = continent_bounds) #> Processing species:Abies alba #> Processing species:Quercus nigra #> Warning: minimal value for n is 3, returning requested palette with 3 different levels  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[5.865272,5.789629999999999,5.780952999999999,5.933609,7.789891999999998,8.729380300000001,8.7658203,8.796797399999999,12.4982874,12.3924805,12.2863281,12.2256836,12.2488281,12.2743164,12.3538086,12.4917969,12.5361328,12.4321289,12.4975586,12.6117188,12.7612305,12.9030273,13.0302734,13.1201172,13.1567383,13.2063477,13.4651367,13.5582031,13.6283203,13.7833008,13.7198242,13.6373047,13.5779297,13.5171875,13.6033203,13.6134766,13.6168501,14.2598432,14.2685547,14.3126953,14.3861328,14.5504883,14.554464,14.706702,15.298589,16.540553,17.111672,17.294138,15.38741,7.87428,6.781689999999998,5.865272],\"lat\":[46.615128,45.353767,45.020792,44.51950799999999,44.266645,44.4093358,44.4223145,44.4195752,44.98176280000001,45.03979489999999,45.2077148,45.2415039,45.3688477,45.4460449,45.4919922,45.5462891,45.5449219,45.46791989999999,45.4616699,45.4972168,45.5442871,45.610791,45.6375,45.69790039999999,45.746582,45.7713867,45.70996090000001,45.77070310000001,45.77094729999999,45.6272461,45.5875977,45.5359375,45.51689450000001,45.4817871,45.2313965,45.16342770000001,45.1516517,45.2493105,45.2825195,45.337793,45.34213869999999,45.29770509999999,45.2940579,45.31718000000001,45.764044,46.96028,48.187632,49.788863,51.815623,49.632797,48.04027,46.615128]}]],[[{\"lng\":[2.439608,2.399305999999999,1.925887,-0.4817600000000001,-0.49233,-0.8081689999999999,-1.061979,-0.5274,2.439608],\"lat\":[41.775382,42.52706899999999,42.892664,42.99674,42.99657,42.962886,42.821763,42.51817799999999,41.775382]}]],[[{\"lng\":[3.18337,3.18235,5.00227,5.056529999999999,6.341279999999999,7.195026999999998,6.750000000000001,6.55,6.050000000000001,4.7,4.576140100000001,4.562109399999999,4.4828125,4.376269499999999,4.2087891,4.131738299999999,4.084863299999999,4.0260742,3.978906299999999,3.946875,4.1345703,4.1580078,4.182617199999999,4.004785200000001,4.0804688,4.1754883,4.239355499999999,4.274121099999999,4.205761700000001,4.1413086,3.886035199999999,3.7439453,3.594624399999999,3.549999999999999,3.5050725,3.520507799999999,3.586914099999999,3.6935547,3.821875,4.006543,4.138867199999999,4.2261719,4.1115234,4.0110352,3.8833984,3.7165039,3.589453100000001,3.425781299999999,3.4125204,3.18337],\"lat\":[51.12527,50.90658999999999,49.80478,49.78868,49.825641,51.744375,52.95,53.15,53.05,52.59999999999999,52.4869105,52.4425781,52.30917969999999,52.1968262,52.0589844,52.0119141,51.9940918,51.92773440000001,51.8478027,51.8105469,51.6729004,51.6334473,51.61030269999999,51.59584960000001,51.551123,51.5192871,51.5039062,51.47163089999999,51.4566895,51.4557617,51.5742188,51.5960449,51.59074399999999,51.55,51.49795289999999,51.48618159999999,51.4539062,51.4499023,51.40937,51.4432129,51.40151369999999,51.3864746,51.3606445,51.3959473,51.3544922,51.36914059999999,51.39941409999999,51.3935059,51.3907339,51.12527]}],[{\"lng\":[3.711716100000001,3.731835899999999,3.819042999999998,3.9509766,4.0750977,4.0675781,4.0467773,3.949121099999999,3.789062499999999,3.7590656,3.711716100000001],\"lat\":[51.6976538,51.6782227,51.6939941,51.6270508,51.6487793,51.66748049999999,51.6849121,51.73945310000001,51.7464355,51.740886,51.6976538]}]],[[{\"lng\":[8.669062,8.776936099999999,8.8760742,8.992773399999999,9.1104492,9.254882800000001,9.209667999999999,9.196386699999998,9.140331999999999,9.067089799999998,8.9945313,8.8880859,8.797916899999999,9.236880000000001,9.487872000000001,9.651047099999998,9.640234400000001,9.625585899999999,9.5911133,9.6614258,9.7732422,9.810351599999999,9.899023399999999,9.999023399999999,10.0236328,9.9620117,9.903710899999998,10.0173828,10.1073242,10.159375,10.1830078,10.2266602,10.2883662,9.830766000000001,9.137910999999999,8.669062],\"lat\":[57.05084899999999,56.7330151,56.8872559,57.01611329999999,57.04365230000001,57.0117188,56.80839839999999,56.7016602,56.7504395,56.7938477,56.7748047,56.7350586,56.6711985,55.377863,55.281992,55.31650039999999,55.3436523,55.4135742,55.4932129,55.5574707,55.6081543,55.6509766,55.7075684,55.73554689999999,55.7614258,55.8130859,55.8428223,55.87607419999999,55.8744629,55.85380859999999,55.8651855,56.0053711,56.1444223,56.82123000000001,57.119508,57.05084899999999]}],[{\"lng\":[10.5260148,10.5269531,10.5335024,10.5260148],\"lat\":[55.792931,55.7837891,55.7818566,55.792931]}],[{\"lng\":[10.6757387,10.6451172,10.6227539,10.5050781,10.4240234,10.3536133,10.2861328,9.994238299999997,9.860644499999999,9.859018499999998,10.6960824,10.6904577,10.6757387],\"lat\":[55.5714838,55.60981450000001,55.6128418,55.5580566,55.5603516,55.59897459999999,55.6108398,55.53530269999999,55.51547850000001,55.36048239999999,55.53750549999999,55.5497137,55.5714838]}]],[[{\"lng\":[6.744443,6.7685762,6.771093700000001,6.802832,6.8770508,6.9123047,6.895312499999999,6.8902344,6.903418,7.004882799999999,7.194140599999999,7.465918000000001,7.875585900000001,8.0374023,8.166113300000001,8.312207000000001,8.521386699999999,8.928417999999997,9.178125000000001,9.19375,9.238671900000002,9.3229492,9.395800800000002,9.3099609,9.5510742,9.618456999999999,9.656933600000002,9.696093799999998,9.627148399999999,9.557226599999998,9.6351563,9.800195300000002,9.842578100000001,9.959570299999999,10.0831055,10.1793945,10.2051758,10.2431641,10.4313477,10.4545898,10.4463867,10.4071289,10.3981445,10.49375,10.5695313,10.5338867,10.5953125,10.6044922,10.634375,10.6310547,10.6449219,10.7425781,10.8344727,10.9450195,10.9989258,11.0908203,11.1321289,11.365918,11.3864258,11.3882813,11.2953125,11.1958008,11.1668945,11.147168,11.1691406,11.2079102,11.2238281,11.271582,11.2520508,11.2482422,11.3299805,11.431543,11.4493164,11.5490234,11.7032227,11.7291016,11.7349609,11.8787109,11.8850586,11.9169922,11.9615234,12.0532227,12.1518555,12.4214844,12.5726563,12.7175781,12.7931641,12.8836914,12.9195312,12.8574219,12.7731445,12.6564453,12.6911133,12.7421875,12.8016602,12.752832,12.7063477,12.5070313,12.4711914,12.5209961,12.5925781,12.8345703,12.9419922,12.9739258,12.9780273,12.9686025,13.131,13.96014,16.6971339,16.7000977,16.7699219,16.7166016,16.6519531,16.8243164,16.9238281,16.7884766,16.6830078,16.4780273,16.3908203,16.3180664,16.2142578,16.3158203,16.6393555,16.978125,17.102832,17.3476562,17.4567383,17.6696289,17.7654297,17.8123415,18.16459,18.27789,18.2891727,18.2705078,18.2105469,18.1326172,17.97978519999999,17.9642578,18.1635742,18.2168945,18.2764648,18.3275372,17.68481,17.62018,16.46661,9.631503,6.744443],\"lat\":[58.113912,58.1025309,58.1322266,58.154541,58.1507324,58.1428711,58.120752,58.10229489999999,58.07050779999999,58.0242188,58.0476563,58.0209473,58.0799805,58.1472656,58.14531250000001,58.22446289999999,58.30058589999999,58.5699707,58.67500000000001,58.71186520000001,58.7390137,58.7475586,58.80566409999999,58.8568359,58.9330078,58.9460449,58.9711914,59.0097168,59.0679199,59.1126953,59.1177734,59.0270508,58.9584961,58.96821289999999,59.02880860000001,59.0092773,59.0386719,59.06206049999999,59.27963870000001,59.3774902,59.44360349999999,59.45566410000001,59.51933589999999,59.5415039,59.5871094,59.69580080000001,59.76455079999999,59.68002929999999,59.6024902,59.42817379999999,59.38920899999999,59.2959961,59.1839355,59.1708496,59.1644531,59.1417969,59.14321289999999,59.104541,59.0657227,59.0365234,59.08686520000001,59.0782715,59.04555659999999,58.988623,58.92270509999999,58.8664062,58.6799316,58.47563479999999,58.42407230000001,58.36914059999999,58.3803223,58.33999019999999,58.1183594,58.00122069999999,57.97319340000001,57.76445309999999,57.71767579999999,57.6794434,57.61269530000001,57.5219238,57.4260742,57.4469727,57.2269531,56.90639649999999,56.823291,56.6628418,56.6491699,56.6177246,56.5155762,56.4523926,56.4557617,56.4405762,56.3844238,56.346875,56.26391599999999,56.2421387,56.2350098,56.2929687,56.2905273,56.24555660000001,56.1375977,55.88183590000001,55.8060547,55.7481445,55.6937988,55.64155399999999,55.62730999999999,55.72473,58.0214952,58.160791,58.2142578,58.30288089999998,58.43432619999999,58.4596191,58.4925781,58.5852539,58.5996582,58.61289059999999,58.6018555,58.6283203,58.63666989999999,58.66362299999999,58.65117189999999,58.65415040000001,58.7108398,58.78051759999999,58.8583984,58.9162109,58.9650391,58.9573285,59.25292,59.34717000000001,59.3694753,59.36713870000001,59.33144529999999,59.31621089999999,59.3290527,59.35937500000001,59.4303711,59.4205078,59.4376465,59.4701434,59.82872,59.84515,59.92792000000001,60.16818999999999,58.113912]}],[{\"lng\":[12.626839,12.6200195,12.5992188,12.5935991,12.626839],\"lat\":[55.6715302,55.6793457,55.6802246,55.67444570000001,55.6715302]}],[{\"lng\":[12.5641248,12.5711914,12.56875,12.5248047,12.5429688,12.6083984,12.5787109,12.5257813,12.4282227,12.3232422,12.2189453,12.0396484,11.8664063,11.912793,11.9345703,11.9220703,11.8853516,11.8583008,11.8419291,12.5641248],\"lat\":[55.6770309,55.6849609,55.78505860000001,55.918457,55.95898440000001,56.0330078,56.0640625,56.0833984,56.10585940000001,56.1221191,56.1186523,56.05214839999999,55.9681641,55.9373047,55.8958984,55.8280762,55.807959,55.77187499999999,55.7403751,55.6770309]}],[{\"lng\":[11.6862139,11.6822266,11.6958984,11.6277344,11.474707,11.4595703,11.4622448,11.6862139],\"lat\":[55.7833918,55.8294922,55.9079102,55.9568848,55.943457,55.90722659999999,55.88901479999999,55.7833918]}],[{\"lng\":[10.7292391,10.753418,10.8564453,10.8944336,10.9261719,10.8828125,10.8458984,10.4902344,10.3835938,10.2827148,10.2966797,10.2870117,10.2960938,10.3384766,10.4369141,10.5241211,10.5175781,10.5371094,10.4446289,10.4602539,10.480957,10.6099609,10.5333008,10.259082,9.962304699999997,9.8151367,9.554296899999997,9.433593800000001,9.2988281,9.0363281,8.9522461,8.849736399999999,9.045910599999999,9.1104492,9.254882800000001,9.2384346,10.7292391],\"lat\":[56.23469739999999,56.2419922,56.2955078,56.3590332,56.44326170000001,56.4928711,56.5217285,56.5205078,56.55483399999999,56.62050779999999,56.7809082,56.8229492,56.9991211,57.02133790000001,57.1722656,57.2432129,57.37934569999998,57.44853519999998,57.56220700000001,57.6145508,57.6486816,57.73691410000001,57.73540039999999,57.61704099999999,57.580957,57.478418,57.2324707,57.1743164,57.1465332,57.1554199,57.15058589999999,57.1210637,57.02854869999999,57.04365230000001,57.0117188,56.9377551,56.23469739999999]}],[{\"lng\":[10.8738281,11.0114258,11.0521484,11.0768555,11.1745117,11.0857422,10.9345703,10.8738281],\"lat\":[57.2622559,57.2291016,57.2525391,57.2769043,57.32290039999999,57.32993159999999,57.3085938,57.2622559]}]],[[{\"lng\":[15.89234,15.91315,16.3239085,16.3487305,16.4078125,16.4575195,16.5279297,16.514339,16.15857,15.89234],\"lat\":[56.77941,56.73941,56.6868844,56.7092773,56.8086914,56.9268066,57.0681641,57.11666529999999,57.00624999999999,56.77941]}],[{\"lng\":[16.9640755,16.9609375,16.9015625,16.8783196,17.02148,16.9640755],\"lat\":[57.2562441,57.25019529999999,57.17460939999999,57.12175939999999,57.27406,57.2562441]}],[{\"lng\":[16.6538016,16.63037109999999,16.6099319,16.64479,16.6538016],\"lat\":[56.882907,56.8768555,56.84799979999999,56.87332000000001,56.882907]}]],[[{\"lng\":[18.215765,18.958602,19.236515,21.474653,20.807281,19.634113,18.96218499999999,18.961975,18.406172,18.215765],\"lat\":[49.27766699999999,48.926365,48.856943,49.483362,49.81311400000001,50.334682,50.228153,50.228088,49.572757,49.27766699999999]}]],[[{\"lng\":[9.919161000000001,9.986258999999999,10.0550781,10.1304647,9.919161000000001],\"lat\":[63.56374599999999,63.5174645,63.5126953,63.52817950000001,63.56374599999999]}],[{\"lng\":[10.6019939,10.590918,10.3400391,10.1885742,10.1025997,10.411923,10.642613,10.6019939],\"lat\":[63.448812,63.4472168,63.46933589999999,63.4547852,63.4372171,63.223858,63.44197499999999,63.448812]}]],[[{\"lng\":[6.25364,6.342357000000001,6.361409800000001,6.457128900000001,6.6923828,6.6298026,6.942621,7.321851099999999,7.2837891,6.9611328,6.7446289,6.7056978,6.25364],\"lat\":[62.468321,62.432751,62.4325252,62.4480957,62.4680664,62.42934440000001,62.42563699999999,62.5914124,62.60229489999999,62.62675780000001,62.6378906,62.6327721,62.468321]}],[{\"lng\":[6.944289299999999,7.024902299999999,7.110839800000001,7.242089799999999,7.408398399999999,7.6484357,8.226914999999998,7.877758000000001,7.876150000000001,6.944289299999999],\"lat\":[62.71956769999999,62.7288086,62.75200199999999,62.7523438,62.71176759999999,62.73417449999999,62.987049,63.059059,63.058563,62.71956769999999]}]],[[{\"lng\":[20.496018,20.619411,20.744687,20.698853,20.496018],\"lat\":[51.207001,50.915454,51.018714,51.133865,51.207001]}]],[[{\"lng\":[24.42635499999999,24.572874,25.801496,24.42635499999999],\"lat\":[48.421318,48.181939,48.327536,48.421318]}]],[[{\"lng\":[5.253729799999999,5.244918000000001,5.2687227,5.2858398,5.417382799999999,5.5738281,5.5743411,5.253729799999999],\"lat\":[60.51642119999999,60.51316629999999,60.2229036,60.20571289999999,60.15410159999999,60.1584961,60.1584692,60.51642119999999]}],[{\"lng\":[5.6221506,5.494531299999999,5.3764648,5.2801201,5.295128,5.3535636,5.494531299999999,5.557031299999999,5.6988281,5.706256700000001,5.6221506],\"lat\":[60.10509150000001,60.07031250000001,60.0672363,60.0839293,59.90093,59.760175,59.8255859,59.9077637,60.0100098,60.0111898,60.10509150000001]}],[{\"lng\":[5.7907934,5.783593799999999,5.7304688,5.763476599999999,5.833984399999999,5.8928328,5.7907934],\"lat\":[59.9168073,59.912793,59.86308589999999,59.80791019999999,59.7946777,59.80288359999999,59.9168073]}],[{\"lng\":[5.9482753,5.8672852,5.772168000000001,5.579492200000001,5.529687500000001,5.472460900000001,5.4035156,5.397258799999999,5.552577299999998,5.564062499999999,5.6573242,5.717968799999999,5.8452148,6.0173828,6.158593799999999,6.169677299999999,5.9482753],\"lat\":[59.7409839,59.7339844,59.6609375,59.6866211,59.71308589999999,59.71308589999999,59.65576169999999,59.65492539999999,59.2808068,59.2912109,59.3102539,59.32983399999999,59.35346679999999,59.41445309999999,59.4896484,59.49379579999999,59.7409839]}],[{\"lng\":[6.1703603,6.050683599999999,5.951855500000001,5.937304699999999,5.968554699999999,5.9487305,5.8891602,5.889160200000001,5.9428915,5.946460999999999,6.164768999999999,6.1703603],\"lat\":[59.42461239999999,59.3681641,59.2990723,59.2339844,59.1861328,59.1354492,59.09794919999999,59.060498,59.02989700000001,59.03191899999999,59.23332000000001,59.42461239999999]}],[{\"lng\":[5.828583200000001,5.669008199999999,5.698032,5.740459,5.828583200000001],\"lat\":[58.9651465,59.0003573,58.930447,58.915228,58.9651465]}]]],null,\"Abies alba\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#E41A1C\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#E41A1C\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addPolygons\",\"args\":[[[[{\"lng\":[-97.29780599999999,-96.208406,-95.82131350000002,-95.732373,-95.6558594,-95.3876465,-95.2734863,-95.15214840000002,-95.13906249999999,-95.0183105,-94.8882813,-94.93588869999999,-94.9928223,-95.0228516,-94.98227539999999,-94.9298828,-94.8898926,-94.8323242,-94.7419434,-94.72436519999999,-94.7782715,-94.73261719999999,-94.6053223,-94.52626950000001,-94.7501465,-94.75961909999999,-94.5744629,-94.09965819999999,-93.8904785,-93.886377,-93.9462891,-93.84145509999999,-93.79399409999999,-93.769043,-93.7730957,-93.8087891,-93.84833979999999,-93.88388669999999,-93.86572269999999,-93.8264648,-93.765918,-93.6948242,-93.38847659999999,-93.28320309999999,-93.1756836,-92.9523926,-92.79130859999999,-92.6712891,-92.2608398,-92.08403319999999,-92.0588867,-92.11396479999999,-92.135498,-92.08022459999999,-92.01733399999999,-91.89316409999999,-91.8244141,-91.6724609,-91.5647949,-91.51420899999999,-91.330957,-91.2777344,-91.2488281,-91.2602539,-91.24399409999999,-91.1553711,-91.1507812,-91.2375,-91.28271479999999,-91.29013669999999,-91.00273440000001,-90.75102539999999,-90.67749019999999,-90.58623050000001,-90.5024902,-90.3791992,-90.30161129999999,-90.24672849999999,-90.21279299999999,-90.1358398,-90.1013672,-90.08271479999999,-90.0737305,-90.05278319999999,-90.05234369999999,-90.1007812,-90.1412598,-90.16079099999999,-90.159082,-89.87724609999999,-89.81826169999999,-89.7973633,-89.7923828,-89.71699219999999,-89.67246089999999,-89.6202637,-89.5771484,-89.5217773,-89.44316409999999,-89.38920900000001,-89.35351559999999,-89.37612299999999,-89.3305664,-89.23608399999999,-89.19526370000001,-89.1555176,-89.1333496,-89.1095215,-89.02138669999999,-89.0157227,-89.065332,-89.11684570000001,-89.18076169999999,-89.2457031,-89.51367189999999,-89.58032229999999,-89.6748047,-89.7208984,-89.68920899999999,-89.682959,-89.66210939999999,-89.6206543,-89.5593262,-89.59086909999999,-89.5306641,-89.4554199,-89.35444339999999,-89.362793,-89.3578613,-89.4009277,-89.4140625,-89.4007324,-89.49443359999999,-89.56337889999999,-89.589502,-89.63168949999999,-89.74379879999999,-89.8151855,-89.7772461,-89.7146973,-89.6650391,-89.6675293,-89.7374512,-89.7731445,-89.8122559,-89.894043,-89.99418949999999,-90.1753418,-90.2849609,-90.4130371,-90.33198240000002,-90.22529299999999,-90.12597660000002,-90.0452148,-89.95424799999999,-89.58847659999999,-89.44350589999999,-89.32055659999999,-89.26357419999999,-89.22363279999999,-89.0540527,-88.9052246,-88.87294919999999,-88.8199219,-88.69208979999999,-88.3499023,-88.2492187,-88.13544920000001,-88.1165527,-88.07836909999999,-88.0324219,-88.0113281,-87.948877,-87.92299799999999,-87.9243164,-87.8976074,-87.85712889999999,-87.81328119999999,-87.79028319999999,-87.90400389999999,-87.9850098,-88.005957,-87.62226559999999,-87.51328119999999,-87.448291,-87.44374999999999,-87.50073239999999,-87.4757812,-87.2810547,-87.25107420000001,-87.184668,-87.17060549999999,-87.11879879999999,-87.07202149999999,-87.0338867,-86.99755859999999,-86.9651367,-86.98579099999999,-87.1237793,-87.1637207,-87.20117189999999,-86.96762699999999,-86.6796387,-86.6060547,-86.5233887,-86.4479492,-86.3741699,-86.257373,-86.16567379999999,-86.13769529999999,-86.1238281,-86.24008789999999,-86.4544434,-86.1751465,-85.8556641,-85.79077149999999,-85.7558105,-85.7429688,-85.7408203,-85.6758789,-85.60351559999999,-85.6409668,-85.6634277,-85.61025389999999,-85.62348630000001,-85.6757812,-85.5042969,-85.35361329999999,-85.3068359,-85.31489259999999,-85.3364258,-85.3834473,-85.41381840000001,-85.41381840000001,-85.37636719999999,-85.3189453,-85.18603519999999,-85.02929689999999,-84.9691895,-84.88891599999999,-84.8005371,-84.55,-84.45405269999999,-84.3828125,-84.3586914,-84.3753418,-84.3556152,-84.309668,-84.0442383,-83.69438479999999,-83.29047849999999,-82.7693359,-82.65146480000001,-82.644043,-82.6505859,-82.66064449999999,-82.74853519999999,-82.8435059,-82.80756839999999,-82.77529299999999,-82.7428711,-82.715332,-82.66088870000002,-82.6260254,-82.61098630000001,-82.596582,-82.6337891,-82.6751953,-82.63593750000001,-82.57958979999999,-82.52060550000002,-82.4981445,-82.4457031,-82.4057617,-82.40053709999999,-82.4305176,-82.52084959999999,-82.6358398,-82.6867187,-82.7145996,-82.6553711,-82.620459,-82.4413574,-82.3540527,-82.2900391,-82.2428711,-82.1806641,-82.1686035,-82.18110349999999,-82.09570309999999,-82.01328119999999,-82.0669434,-82.0778809,-82.0395996,-82.00639650000001,-81.97016599999999,-81.9205566,-81.88154299999999,-81.8286621,-81.8955078,-81.9457025,-81.55722,-80.57956349999999,-80.6500977,-80.68637699999999,-80.7486328,-80.787207,-80.81840819999999,-80.83818359999999,-80.8086914,-80.77099609999999,-80.7798828,-80.765918,-80.70024409999999,-80.6884766,-80.7290527,-80.73173829999999,-80.69350589999999,-80.66547849999999,-80.65390619999999,-80.6328613,-80.60693359999999,-80.62285159999999,-80.6100098,-80.55546,-80.53843309999999,-80.57285159999999,-80.5849609,-80.58115230000001,-80.5678223,-80.5241211,-80.56430659999999,-80.89999999999999,-81.104541,-81.2495117,-81.3371094,-81.3857422,-81.4571777,-81.5039551,-81.51621089999999,-81.5204102,-81.5005859,-81.4713867,-81.4532227,-81.4603516,-81.44174799999999,-81.41259769999999,-81.36489259999999,-81.2884766,-81.3291504,-81.37773439999999,-81.380957,-81.29497069999999,-81.2579102,-81.2188965,-81.1754395,-81.1957031,-81.22338870000002,-81.25936999999999,-81.2423828,-81.16992189999999,-81.16552729999999,-81.18657229999999,-81.19790039999999,-81.16210939999999,-81.0983887,-81.0661133,-81.06503909999999,-81.09550779999999,-81.11328120000002,-81.08286129999999,-81.0455566,-80.92343749999999,-80.87236329999999,-80.8820801,-80.8492188,-80.79082029999999,-80.7580078,-80.69423829999999,-80.70205080000001,-80.7338379,-80.765332,-80.7979004,-80.80253909999999,-80.70932619999999,-80.6830566,-80.67778319999999,-80.6472168,-80.6258301,-80.6082031,-80.57934569999999,-80.513623,-80.48574219999999,-80.47426759999999,-80.5300293,-80.63417969999999,-80.57221679999999,-80.4609863,-80.3628418,-80.26835939999999,-80.2296875,-80.1803223,-80.12255859999999,-80.0217773,-79.94072269999999,-79.8936523,-79.9331055,-79.8049805,-79.73500980000001,-79.61494139999999,-79.5871094,-79.4986816,-79.41992189999999,-79.27602539999999,-79.229248,-79.2813477,-79.2264648,-79.22734369999999,-79.2383789,-79.1937988,-79.13818359999999,-78.92031249999999,-78.84145509999999,-78.5776855,-78.4058594,-78.01333009999999,-77.97055659999999,-77.9532715,-77.9260254,-77.9328613,-77.92783200000001,-77.88803709999999,-77.86083979999999,-77.75073239999999,-77.69697270000002,-77.64965819999999,-77.51767579999999,-77.3797852,-77.4020508,-77.41293949999999,-77.41225589999999,-77.3844727,-77.3583984,-77.2962402,-77.25175780000001,-77.13388669999999,-77.0495117,-76.89589839999999,-76.7966797,-76.7332031,-76.7070801,-76.6180176,-76.51689449999999,-76.4397949,-76.362207,-76.4567383,-76.74497070000001,-76.8986328,-76.97495119999999,-77.0702637,-76.8610352,-76.77915039999999,-76.6280273,-76.6133789,-76.6075195,-76.5659668,-76.5129395,-76.55278319999999,-76.59545899999999,-76.97446290000001,-77.03999020000001,-76.8872559,-76.7414062,-76.6341309,-76.6110352,-76.57719729999999,-76.53247069999999,-76.51562,-76.489502,-76.4466309,-76.3902344,-76.27524409999999,-76.17382810000001,-76.10351559999999,-75.96596679999999,-75.85669799999999,-75.7448953,-75.7588379,-75.7722168,-75.8120117,-75.8539062,-75.9789062,-76.0011719,-76.0457031,-76.08359369999999,-76.07568359999999,-76.06005859999999,-76.0697754,-76.206543,-76.26357419999999,-76.35830079999999,-76.5035156,-76.61113279999999,-76.7262207,-76.71875,-76.74003909999999,-76.7336426,-76.71762699999999,-76.6789062,-76.559375,-76.47880859999999,-76.4243164,-76.3836914,-76.3211914,-76.22739260000002,-76.2706055,-76.2217773,-76.14999999999999,-76.1410645,-76.1478516,-76.0547363,-75.95019529999999,-75.8830078,-75.8200684,-75.8666016,-75.9248535,-75.97846679999999,-75.99277339999999,-75.9597656,-75.9734375,-75.965332,-75.9464844,-75.9178711,-75.8935547,-75.80976559999999,-75.7282227,-75.63027409999999,-75.62289800000001,-75.6184804,-75.7578613,-75.8904297,-75.9415527,-75.96635739999999,-75.9994141,-76.1439941,-76.24423829999999,-76.39956049999999,-76.4878418,-76.5046387,-76.63393549999999,-76.671875,-76.7654297,-76.9251953,-77.00195309999999,-77.1961914,-77.2270508,-77.2508789,-77.0069824,-76.7035156,-76.63090819999999,-76.60229489999999,-76.5068359,-76.46201169999999,-76.4008789,-76.3382812,-76.28330079999999,-76.3007812,-76.3269531,-76.401123,-76.4973633,-76.61088869999999,-76.7380859,-76.75585939999999,-76.7577148,-76.5383789,-76.45390619999999,-76.39316409999999,-76.40546879999999,-76.40097659999999,-76.26347659999999,-76.2543945,-76.2685547,-76.367627,-76.3055664,-76.484082,-76.54946289999999,-76.6198242,-76.7154297,-76.84916989999999,-76.92509769999999,-77.11108400000001,-77.0706543,-76.9399902,-76.8286133,-76.79277340000002,-76.4924805,-76.4366211,-76.3441406,-76.30561519999999,-76.2932129,-76.2618164,-76.2642578,-76.3549316,-76.4717773,-76.5495117,-76.644873,-76.9063477,-77.0467773,-77.1099121,-77.23193359999999,-77.27324220000001,-77.3136719,-77.28378909999999,-77.26040039999999,-77.16464839999999,-77.0918945,-77.04560549999999,-77.0303711,-77.01816409999999,-77.0539062,-77.13491209999999,-77.2208984,-77.2416016,-77.2325195,-77.1559082,-77.07670899999999,-77.0011719,-76.9883789,-76.95024409999999,-76.8897461,-76.86777339999999,-76.86811519999999,-76.7691406,-76.5936035,-76.45439449999999,-76.4019531,-76.34116209999999,-76.3329102,-76.36572269999999,-76.40878909999999,-76.64199219999999,-76.6685547,-76.67734370000001,-76.6591797,-76.64687499999999,-76.57241210000001,-76.50991209999999,-76.43876949999999,-76.3940918,-76.41640629999999,-76.45849609999999,-76.5013184,-76.53686520000001,-76.5210938,-76.5155273,-76.5195312,-76.49374999999999,-76.5187988,-76.5585449,-76.5462402,-76.4730957,-76.42006839999999,-76.42758789999999,-76.4893555,-76.5739258,-76.5704102,-76.4208984,-76.4027832,-76.4056641,-76.3589844,-76.3450684,-76.347168,-76.3308105,-76.2763672,-76.2568359,-76.24765619999999,-76.2230469,-76.21582029999999,-76.14135739999999,-76.0972656,-76.08071289999999,-76.0850586,-76.0629883,-76.0062988,-75.9589355,-75.9704102,-75.87294919999999,-75.9134766,-75.95473629999999,-76.00312,-75.93872069999999,-75.8759766,-75.9759766,-76.0743652,-76.15312,-76.2356934,-76.21684569999999,-76.132959,-76.13520509999999,-76.18569339999999,-76.2450195,-76.3127441,-76.32958979999999,-76.33066410000001,-76.2408203,-76.1910645,-76.1681641,-76.2469727,-76.3003418,-76.34116209999999,-76.3081055,-76.27832029999999,-76.21298829999999,-76.175,-76.05693359999999,-76.0169434,-76.00092769999999,-76.1129395,-76.1983887,-76.26416019999999,-76.294873,-76.2646484,-76.21166989999999,-76.1165039,-76.0512207,-76.0203125,-76.00668949999999,-75.98574219999999,-75.9673828,-75.9372559,-75.88881839999999,-75.8586914,-75.87675779999999,-75.863916,-75.8849609,-75.92807619999999,-75.8913086,-75.8556152,-75.79531249999999,-75.82905269999999,-75.8508301,-75.73515619999999,-75.6592773,-75.71933589999999,-75.7923828,-75.8881348,-75.9750488,-75.9973633,-75.9845215,-75.934375,-75.8540039,-75.8120605,-75.76689449999999,-75.6988281,-75.63154299999999,-75.5871094,-75.5963867,-75.35351559999999,-75.29179689999999,-75.22543949999999,-75.1726494,-75.1051051,-75.11083979999999,-75.1871094,-75.1284668,-75.08398439999999,-75.08867189999999,-75.18505859999999,-75.31040039999999,-75.39218749999999,-75.41264649999999,-75.5198242,-75.573877,-75.5672852,-75.5815918,-75.5875977,-75.5021484,-75.4728736,-75.59323499999999,-94.171942,-94.56376,-97.165689,-97.219027,-97.29780599999999],\"lat\":[30.036723,28.71916,28.6592657,28.7117187,28.7446289,28.8984375,28.9638672,29.079248,29.1678223,29.2594727,29.3705566,29.4604492,29.530957,29.70234379999999,29.7125977,29.6801758,29.6769531,29.7525879,29.75,29.6552734,29.5478516,29.53535159999999,29.5678223,29.5479492,29.41801760000001,29.38427729999999,29.4845215,29.6704102,29.68935549999999,29.72265619999999,29.8149902,29.97973630000001,29.97724609999999,29.9522949,29.9140625,29.8508301,29.8188477,29.8100098,29.7556152,29.7251465,29.75268549999999,29.7699219,29.7765625,29.78940429999999,29.7789551,29.7141602,29.63466799999999,29.5970703,29.5568359,29.59282229999999,29.6171875,29.6676758,29.6994629,29.7607422,29.800293,29.8360352,29.7506836,29.7460938,29.6053223,29.5553711,29.5135742,29.5628906,29.564209,29.5054688,29.4573242,29.3506836,29.3179199,29.330957,29.320752,29.2889648,29.1935059,29.1308594,29.1506348,29.2715332,29.2997559,29.2951172,29.25581049999999,29.1310059,29.1049316,29.136084,29.1817871,29.2397461,29.2967773,29.33681639999999,29.4313965,29.4633301,29.4797363,29.5043945,29.53715819999999,29.4580078,29.4161133,29.3806152,29.3332031,29.3128906,29.3165039,29.30239259999999,29.2675293,29.2492676,29.1941406,29.10502929999999,29.0702148,28.9813477,28.9986816,29.0811035,29.0540039,29.0166016,29.0461426,29.0986816,29.14272459999999,29.2028809,29.21816409999999,29.2482422,29.3356934,29.3332031,29.4200684,29.4860352,29.5386719,29.61928709999999,29.6460449,29.6748535,29.6836914,29.6741211,29.6980469,29.725293,29.7722168,29.78437499999999,29.8202148,29.8397949,29.9209961,29.9776855,30.0108887,30.0460449,30.05815430000001,30.00209959999999,29.9150391,29.9038086,29.929834,30.0072754,30.0457031,30.07832029999999,30.117041,30.1445313,30.1719727,30.137207,30.1236816,30.12587889999999,30.0592773,30.0291016,30.0650879,30.140332,30.2775879,30.3792969,30.3690918,30.351416,30.26875,30.1659668,30.2231445,30.3453125,30.3436523,30.332373,30.3682617,30.41513669999999,30.4163086,30.4064941,30.3553711,30.3734863,30.3631836,30.3666016,30.415332,30.56621090000001,30.68125,30.6941895,30.6269043,30.5615234,30.44965820000001,30.4141602,30.4074219,30.34687,30.2917969,30.259082,30.2543945,30.2309082,30.2647461,30.3681152,30.3941406,30.3638184,30.30927729999999,30.2942871,30.33925779999999,30.39667970000001,30.4537109,30.5387695,30.5389648,30.5004395,30.5539063,30.5703125,30.5019043,30.4308594,30.39667970000001,30.3742188,30.3392578,30.3723633,30.4028809,30.42470699999999,30.4670898,30.4956055,30.4820801,30.4930176,30.4642578,30.4415527,30.4058105,30.4291016,30.3991211,30.3325195,30.2144043,30.1719727,30.1669922,30.2012695,30.2443848,30.2792969,30.2867676,30.2369141,30.1894531,30.1483887,30.11708980000001,30.12192379999999,29.97578129999999,29.87573240000001,29.7978516,29.75810550000001,29.7401367,29.7850586,29.8424805,29.7675781,29.6952148,29.6802246,29.7079102,29.7210938,29.7453125,29.7776367,29.7730469,29.8978516,29.9101562,29.907373,29.9293945,29.9822754,30.0290039,30.0647461,30.1038086,29.9259766,29.4519043,29.0515625,28.8875,28.8120117,28.7699219,28.4858398,28.2368164,27.84599609999999,27.7765625,27.734375,27.70937,27.7331055,27.7184082,27.7459961,27.7772461,27.8732422,27.8977539,27.9637695,27.9812012,27.9584473,27.8778809,27.8679199,27.902832,27.8628906,27.8354004,27.7711426,27.6782715,27.5245605,27.5152832,27.4996094,27.4492188,27.4010742,27.059668,26.9357422,26.8708008,26.848877,26.8400879,26.8743652,26.9367676,26.9634277,26.9615723,26.8915527,26.7043457,26.5520508,26.5398438,26.5520508,26.6314453,26.6646973,26.6870605,26.597168,26.5123123,26.45220299999999,28.01889,28.1809082,28.272168,28.3810059,28.5606445,28.6355957,28.757666,28.7589355,28.7324707,28.682959,28.6328125,28.6009277,28.5785156,28.5162109,28.4628906,28.3449707,28.3749023,28.4521973,28.5180176,28.5229004,28.3203613,28.1775879,28.0575157,28.0848011,28.1808594,28.271582,28.3646973,28.4264648,28.486084,28.55639649999999,29.0498535,29.4569824,29.7937988,30.1412109,30.2699707,30.6407715,30.7314453,30.8018066,30.8746582,30.9137695,31.0090332,31.08828129999999,31.1270508,31.199707,31.1794434,31.171875,31.263916,31.3137695,31.33232419999999,31.35327149999999,31.37119139999999,31.4360352,31.47211910000001,31.5312988,31.538916,31.5284668,31.538916,31.5743164,31.6103027,31.6461426,31.66694339999999,31.7041992,31.7437012,31.7533691,31.7879883,31.8134766,31.840918,31.87861329999999,31.89409179999999,31.892041,31.9449219,32.0295898,32.0686035,32.113916,32.1258301,32.1421875,32.21572269999999,32.2458984,32.265332,32.29833979999999,32.36337890000001,32.4480469,32.3370605,32.3486328,32.3811035,32.3959473,32.3262695,32.2928223,32.28730470000001,32.32441410000001,32.3518066,32.4227539,32.4753906,32.51171879999999,32.5336914,32.5213379,32.5007324,32.5373535,32.5765137,32.5928711,32.5891113,32.6199219,32.6671387,32.7287109,32.8100586,32.7874023,32.8248047,32.90927729999999,33.0008789,33.0272949,33.0425293,33.1354004,33.1851562,33.3154297,33.4048828,33.3631836,33.3121582,33.2441406,33.4059082,33.6586914,33.7240723,33.8732422,33.9175781,33.9118164,33.9934082,34.1689941,34.0731445,33.9894531,33.9397461,34.05014649999999,34.1491699,34.28496089999999,34.33198239999999,34.3575195,34.45136720000001,34.5266113,34.5547852,34.5921387,34.73081049999999,34.6943848,34.62026369999999,34.6029297,34.615625,34.7079102,34.6973633,34.7014648,34.7041504,34.70698239999999,34.7521484,34.7699219,34.7772461,34.8429199,34.9365234,34.98935549999999,34.9409668,34.9702637,35.0251953,35.1546387,35.00498049999999,34.990332,35.0733398,35.1041504,35.1529785,35.2151855,35.2704102,35.3056152,35.3296875,35.45839840000001,35.5273926,35.4630859,35.43149410000001,35.45322269999999,35.5296875,35.5323242,35.5084473,35.4364746,35.3970215,35.4077637,35.40126949999999,35.36904299999999,35.35415039999999,35.3802734,35.5083984,35.5872454,35.7664083,35.8432617,35.8999023,35.9557617,35.9601563,35.8959473,35.722168,35.6911621,35.6905273,35.7875488,35.8786621,35.9703125,35.99121089999999,35.9670898,35.95288089999999,35.9560547,35.9436523,35.9576172,36.0334961,36.1333008,36.2291504,36.1480957,36.07529299999999,36.01533199999999,36.0281738,36.0679688,36.1335449,36.1381836,36.1160156,36.1898926,36.16689449999999,36.145752,36.2150879,36.2792969,36.23452149999999,36.20898439999999,36.1756836,36.1128418,36.2678711,36.38300780000001,36.4291504,36.47377929999999,36.5710449,36.5999512,36.63759770000001,36.659082,36.632666,36.5665039,36.2710449,36.1037109,35.9500878,35.961908,35.9843832,36.229248,36.6570312,36.7655273,36.8619629,36.9126465,36.93061520000001,36.9526367,36.8898437,36.8970215,36.9610352,37.0474121,37.1729492,37.1841309,37.225,37.27104490000001,37.2957031,37.309082,37.3291992,37.3176758,37.21767579999999,37.2217285,37.1428711,37.0723145,37.0307617,36.9913086,37.0131348,37.0526855,37.1108887,37.1492676,37.2126953,37.24687499999999,37.3225586,37.44877930000001,37.4791992,37.5054199,37.30937,37.2735352,37.2999512,37.33193360000001,37.3861328,37.3570312,37.4306152,37.495166,37.53027340000001,37.5714844,37.62885740000001,37.6691406,37.7550781,37.8101563,37.94023440000001,38.0330078,38.1656738,38.1671875,38.095459,37.9615234,37.9379883,37.6822266,37.6704102,37.67568360000001,37.721582,37.7943359,37.8480957,37.8935547,37.96323239999999,38.0111816,38.09448239999999,38.1339355,38.1970703,38.3566895,38.3701172,38.3400391,38.3517578,38.3966309,38.5291992,38.59999999999999,38.6765625,38.7195313,38.7757813,38.8892578,38.77773440000001,38.70581050000001,38.6500977,38.5409668,38.4948242,38.40771480000001,38.3971191,38.441748,38.4452637,38.3938965,38.3470215,38.2920898,38.3371582,38.3902832,38.2629395,38.2283203,38.1735352,38.1250488,38.08701170000001,38.1407715,38.196875,38.2682617,38.4543457,38.53750000000001,38.6119629,38.57954100000001,38.5385254,38.43579099999999,38.4036621,38.3615234,38.3689941,38.42021479999999,38.47495120000001,38.5321777,38.742627,38.7882813,38.840625,38.8983398,38.94521479999999,39.0011719,39.0652344,39.0679688,39.03061520000001,39.073877,39.12602539999999,39.1586914,39.2542969,39.2693359,39.22500000000001,39.252832,39.3039062,39.32465819999999,39.36450199999999,39.38754879999999,39.4039062,39.3227539,39.3521484,39.438623,39.42031250000001,39.3799316,39.4032227,39.4331055,39.4703125,39.527002,39.56113279999999,39.5687012,39.5850586,39.5045898,39.5108887,39.4683594,39.4596191,39.4108398,39.39858400000001,39.3759766,39.3672852,39.3688477,39.3150391,39.1916016,39.06362299999999,39.1229492,39.0821289,38.99072269999999,39.0091797,39.009375,38.9527832,38.9085938,38.9430664,38.9155762,38.8527344,38.8226562,38.8182129,38.709668,38.72285160000001,38.7724609,38.7583008,38.7066895,38.6212402,38.6250977,38.601709,38.60156250000001,38.6186523,38.5999512,38.4946289,38.43642579999999,38.3613281,38.3176758,38.27954099999999,38.294873,38.3227539,38.3319336,38.2913574,38.30966799999999,38.3555176,38.3620605,38.31875,38.2612305,38.2139648,38.1692383,38.1472168,38.1403809,38.0866699,38.0327637,37.971582,37.97373049999999,37.9539551,37.8213867,37.7563477,37.6191406,37.39843750000001,37.2638184,37.212207,37.1519043,37.2966309,37.4251953,37.472998,37.5163574,37.5353516,37.55869140000001,37.6312012,38.06503910000001,38.1291992,38.2422852,38.2526068,38.5962473,38.5993652,38.5911133,38.6324219,38.7228027,38.7775391,38.8193848,38.9665527,39.0927734,39.2813965,39.402832,39.4769531,39.55297849999999,39.5894531,39.6407715,39.7173828,39.7666918,39.905364,36.36342799999999,36.189472,34.171935,32.887982,30.036723]}],[{\"lng\":[-75.4520946,-75.47163090000001,-75.5235352,-75.51923830000001,-75.52421869999999,-75.35341799999999,-75.2310547,-75.1361328,-75.0501953,-75.00973379999999,-75.00538399999999,-75.4520946],\"lat\":[39.7427516,39.7124023,39.6018555,39.5318848,39.4901855,39.3398438,39.2842773,39.20786129999999,39.21083979999999,39.1986275,39.228082,39.7427516]}],[{\"lng\":[-75.19747579999999,-75.2259766,-75.3785156,-75.33305659999999,-75.2099401,-75.19747579999999],\"lat\":[38.1262994,38.0723145,37.8720703,37.8882812,38.0628854,38.1262994]}],[{\"lng\":[-75.6535232,-75.71718749999999,-75.67576579999999,-75.6535232],\"lat\":[35.9128314,35.9461426,35.8771877,35.9128314]}],[{\"lng\":[-76.3007128,-76.4370117,-76.5285645,-76.5036621,-76.3577148,-76.33026599999999,-76.3007128],\"lat\":[34.875715,34.7563477,34.6314941,34.6429687,34.8036621,34.8283563,34.875715]}],[{\"lng\":[-82.0842373,-82.08378909999999,-82.1211426,-82.16914059999999,-82.1355957,-82.1076181,-82.0842373],\"lat\":[26.5337476,26.5523437,26.6655273,26.7007324,26.5919922,26.5373653,26.5337476]}],[{\"lng\":[-88.3162598,-88.2897461,-88.1593262,-88.07133789999999,-88.109375,-88.26391599999999,-88.3162598],\"lat\":[30.2404297,30.2329102,30.2309082,30.25234369999999,30.2737305,30.2547363,30.2404297]}],[{\"lng\":[-89.22397460000001,-89.2106934,-89.18466800000002,-89.2764648,-89.28764649999999,-89.31005859999999,-89.34199219999999,-89.2694336,-89.22045899999999,-89.22397460000001],\"lat\":[30.08408200000001,30.1262207,30.1686523,30.1108398,30.0941895,30.07871089999999,30.06284179999999,30.0607422,30.0375977,30.08408200000001]}],[{\"lng\":[-81.45092769999999,-81.4846191,-81.4827148,-81.46347660000001,-81.41899409999999,-81.45092769999999],\"lat\":[30.9474121,30.8978516,30.8140625,30.7277832,30.97143549999999,30.9474121]}],[{\"lng\":[-76.66196289999999,-76.60781249999999,-76.56850589999999,-76.5462402,-76.62226559999999,-76.67392579999999,-76.66196289999999],\"lat\":[34.68466799999999,34.6635742,34.6525391,34.6548828,34.6945313,34.7001465,34.68466799999999]}],[{\"lng\":[-88.6592285,-88.5706543,-88.5581055,-88.5739746,-88.7228516,-88.7130859,-88.6592285],\"lat\":[30.2255859,30.2047852,30.215918,30.2291504,30.2642578,30.2449219,30.2255859]}],[{\"lng\":[-88.8668945,-88.8279785,-88.8556641,-88.8274414,-88.8125977,-88.82587889999999,-88.8668945],\"lat\":[30.0567383,29.92836909999999,29.7758789,29.8077148,29.9333496,30.0003906,30.0567383]}],[{\"lng\":[-88.90117189999999,-88.9411133,-88.94360349999999,-88.8893066,-88.87265619999999,-88.90117189999999],\"lat\":[29.7326172,29.6802246,29.66025389999999,29.7125977,29.7529785,29.7326172]}],[{\"lng\":[-85.008252,-84.90791019999999,-84.7371582,-84.812207,-84.87700199999999,-85.0005371,-85.0493164,-85.116748,-85.008252],\"lat\":[29.6066406,29.642627,29.73242189999999,29.717627,29.6786621,29.6271973,29.637793,29.6328125,29.6066406]}],[{\"lng\":[-91.7619141,-91.7542969,-91.76767579999999,-91.7964844,-91.87524409999999,-91.9250488,-92.0066406,-91.9962402,-91.83085939999999,-91.7937012,-91.7619141],\"lat\":[29.5390137,29.5668945,29.5847168,29.5969727,29.6409668,29.6439453,29.6103027,29.5730957,29.4864746,29.5007324,29.5390137]}],[{\"lng\":[-94.82597659999999,-94.8716797,-95.0896484,-95.03969730000001,-94.86494139999999,-94.76762699999999,-94.82597659999999],\"lat\":[29.3413086,29.2901367,29.1363281,29.1458984,29.2528809,29.3390625,29.3413086]}]],[[{\"lng\":[18.84252399999999,19.607497,19.005694,18.658636,18.658607,18.466261,18.449632,18.452124,18.84252399999999],\"lat\":[-34.068013,-34.05058700000001,-33.654013,-33.818925,-33.818943,-33.950218,-33.962823,-34.00013,-34.068013]}]],[[{\"lng\":[-90.70974,-90.591224,-89.83719099999999,-89.66570899999999,-89.56056199999999,-90.11402299999999,-90.19237099999999,-90.41730799999999,-90.417311,-90.70974],\"lat\":[35.816803,34.208987,34.40818300000001,35.06822400000001,36.111708,36.720295,36.73715899999999,36.52037800000001,36.520375,35.816803]}]]],null,\"Quercus nigra\",{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#377EB8\",\"weight\":1,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#377EB8\",\"fillOpacity\":0.5,\"smoothFactor\":1,\"noClip\":false},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#E41A1C\",\"#377EB8\"],\"labels\":[\"Abies alba\",\"Quercus nigra\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":0.5,\"position\":\"bottomright\",\"type\":\"unknown\",\"title\":\"Species\",\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":null}]}],\"setView\":[[0,0],2,[]],\"limits\":{\"lat\":[-34.068013,63.56374599999999],\"lng\":[-97.29780599999999,25.801496]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"function calculates range size (sq km) species range polygons.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"","code":"range_sizes(clipped_polygons_list)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"clipped_polygons_list list clipped range polygons.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/range_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"","code":"# Create a dataframe with a 'species_name' column test_data <- data.frame(species_name = c(\"Acer_campestre\", \"Acer_platanoides\")) # Generate range polygons for the speceis in the dataframe polygon_list <- get_range_convex_hulls(test_data) #> Processing species:Acer_campestre #> Processing species:Acer_platanoides # Get continent boundaries continent_sf <- get_continent_sf() # Clip these range polygons to the continent bounds clipped_polygon_list <- clip_polygons_to_land(polygon_list, continent_sf) # Generate range sizes for each speices using the clipped range polygons sizes <- range_sizes(clipped_polygons_list = clipped_polygon_list)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/scale_by_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale by Median — scale_by_median","title":"Scale by Median — scale_by_median","text":"Transform values dataframe z scores around median. classify species status, measures range size evolutionary distinctiveness must tranformed.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/scale_by_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale by Median — scale_by_median","text":"","code":"scale_by_median(data_frame, columns_chosen = NULL)"},{"path":"https://anytko.github.io/GeoFunPhy/reference/scale_by_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale by Median — scale_by_median","text":"data_frame data frame containing columns transform. columns_chosen character vector specifying column names transform. Default NULL.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/scale_by_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale by Median — scale_by_median","text":"scaled data frame Z-scores computed using median medain absolute deviation (MAD) selected columns.","code":""},{"path":"https://anytko.github.io/GeoFunPhy/reference/scale_by_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale by Median — scale_by_median","text":"Chosen columns scaled using median median absolute deviation. transformation recommend range size evolultionary distinctiveness classifying ecological status species using EcoStatusR::check_eco_status().","code":""},{"path":[]},{"path":"https://anytko.github.io/GeoFunPhy/reference/scale_by_median.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale by Median — scale_by_median","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":[]}]
