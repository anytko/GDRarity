[{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://anytko.github.io/GDRarity/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"vignette-info","dir":"Articles","previous_headings":"","what":"Vignette Info","title":"","text":"vignette provides introduction usage GDRarity. : Find best restriction accompanying method explain variation flowering phenology 70 British plant species. Analyse rarity species using restriction.","code":""},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"","text":"","code":"library(GDRarity)"},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import Data","title":"","text":"","code":"species_70_path <- system.file(\"extdata\", \"species_70.csv\", package = \"GDRarity\") abundance_70_path <- system.file(\"extdata\", \"abundance_70.csv\", package = \"GDRarity\")  species_70 <- read.csv(species_70_path) abundance_70 <- read.csv(abundance_70_path)"},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"run-all-methods-on-all-63-restrictions-of-gdr","dir":"Articles","previous_headings":"","what":"Run All Methods on All 63 Restrictions of GDR","title":"","text":"running taxonomic frequency measure regional geographic rarity due computational requirements associated calculating range sizes using GBIF.","code":"all_combinations <- restriction_performance_pipeline(species_df = species_70, abundance_df = abundance_70, trait_cols = c(\"SLA\", \"seed_mass\", \"canopy_height\"), geo_methods = \"taxonomic\", response_vars = \"flowering_duration\")"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"best-restriction-for-flowering-phenology","dir":"Articles","previous_headings":"","what":"Best Restriction for Flowering Phenology","title":"","text":"best restriction explain variation flowering phenology 70 British species GLFRPR, explains 23.2% variation flowering window incorporates: Local Geographic Rarity (GL) Regional Functional Rarity (FR) Regional Phylogenetic Rarity (PR)","code":""},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"methods-used","dir":"Articles","previous_headings":"Best Restriction for Flowering Phenology","what":"Methods Used","title":"","text":"Regional Geographic Rarity (GR): Taxonomic frequency Regional Functional Rarity (FR): Mean Euclidean distance Local Phylogenetic Rarity (PR): Abundance-weighted phylogenetic mean pair-wise distance","code":""},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"thresholds-applied","dir":"Articles","previous_headings":"Best Restriction for Flowering Phenology","what":"Thresholds Applied","title":"","text":"Geographic rarity: < 15% Functional rarity: > 75% Phylogenetic rarity: > 75%","code":""},{"path":[]},{"path":[]},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"example-adding-random-habitat-specificity","dir":"Articles","previous_headings":"Incorporating Additional Dimensions","what":"Example: Adding Random Habitat Specificity","title":"","text":"","code":"set.seed(123) # for reproducibility species_70_hs <- species_70 species_70_hs$habitat_specificity <- runif(nrow(species_70_hs), min = 0, max = 1)"},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"re-run-methods-with-habitat-specificity","dir":"Articles","previous_headings":"Incorporating Additional Dimensions","what":"Re-run Methods with Habitat Specificity","title":"","text":"using user-specified rarity dimensions, must specify thresholds directions.","code":"# Must specify all thresholds and directions if using user-specified rarity dimension(s) hs_combinations <- restriction_performance_pipeline(species_df = species_70_hs, abundance_df = abundance_70, additional_dimensions = \"habitat_specificity\", trait_cols = c(\"SLA\", \"seed_mass\", \"canopy_height\"), geo_methods = \"taxonomic\", response_vars = \"flowering_duration\", threshold_sets = list(list(GR = 0.15, GL = 0.15, FR = 0.75, FL = 0.75, PR = 0.75, PL = 0.75, H = 0.85)), direction_sets = list(list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR = \"high\", PL = \"high\", H = \"high\")))"},{"path":[]},{"path":"https://anytko.github.io/GDRarity/articles/GDRarity.html","id":"best-restriction-for-flowering-phenology-incorporating-habitat-specificity","dir":"Articles","previous_headings":"","what":"Best Restriction for Flowering Phenology Incorporating Habitat Specificity","title":"","text":"best restriction explain variation flowering phenology 70 British species incorporating user-specified axis habitat specificity GLFRLPRH, explains 78.6% variation flowering window incorporates: Local Geographic Rarity (GL) Regional Functional Rarity (FR) Local Functional Rarity (FL) Regional Phylogenetic Rarity (PR) Habitat Specificity (H)","code":""},{"path":"https://anytko.github.io/GDRarity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alivia Nytko. Author, maintainer.","code":""},{"path":"https://anytko.github.io/GDRarity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nytko (2025). GDRarity: Implementation global model discretized rarity restrictions. R package version 1.0, https://anytko.github.io/GDRarity/.","code":"@Manual{,   title = {GDRarity: Implementation of the global model of discretized rarity and its restrictions},   author = {Alivia Nytko},   year = {2025},   note = {R package version 1.0},   url = {https://anytko.github.io/GDRarity/}, }"},{"path":[]},{"path":"https://anytko.github.io/GDRarity/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"","text":"Global Model Discretized Rarity (GDR) integrates geographic, functional, phylogenetic dimensions rarity regional local scales. GDRarity R package characterizes GDR 63 restrictions. webpage https://anytko.github.io/GDRarity/; source code https://github.com/anytko/GDRarity.","code":""},{"path":"https://anytko.github.io/GDRarity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"","text":"can install development version GDRarity like :","code":"devtools::install_github(\"anytko/GDRarity\")"},{"path":"https://anytko.github.io/GDRarity/index.html","id":"features","dir":"","previous_headings":"Installation","what":"Features","title":"","text":"Automates restriction selection based available data. Characterizes rarity species using multiple restrictions simultaneously. Tests various methods calculating geographic, functional, phylogenetic dimensions rarity rarity thresholding. Analyzes restriction performance explaining response variable (.e. biological processes). Accepts additional, user specified dimensions rarity create augment new restrictions GDR.","code":""},{"path":"https://anytko.github.io/GDRarity/index.html","id":"caveats","dir":"","previous_headings":"Installation","what":"Caveats","title":"","text":"pulls plant trait data LEDA BIEN plant trait databases. Certain methods, calculating regional geographic rarity using extent occurrence (range size) requires internet connection can computationally intensive. incorporate Rabinowitz Rarity GDR restriction, habitat specificity can added additional, user specified dimension rarity.","code":""},{"path":"https://anytko.github.io/GDRarity/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"","text":"63 restrictions GDR can applied using phylogeny, species, abundance, trait data within one function. Results Restriction GRFLPR","code":"library(GDRarity) species_70_path <- system.file(\"extdata\", \"species_70.csv\", package = \"GDRarity\") abundance_70_path <- system.file(\"extdata\", \"abundance_70.csv\", package = \"GDRarity\")  species_70 <- read.csv(species_70_path) abundance_70 <- read.csv(abundance_70_path)  all_restrictions <- gdrare_pipeline(       species_df = species_70,       abundance_df = abundance_70,       trait_cols = c(\"SLA\", \"seed_mass\", \"canopy_height\"),       geo_rarity_method = \"taxonomic\",       fun_rarity_method = \"min_distance\") all_restrictions %>%   select(species, GR_raw, FL_raw, PR_raw, GRFLPR) %>%   head(6) %>%   mutate(across(where(is.numeric), ~ round(., 3))) %>%     knitr::kable()"},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign rarity types based on rarity restriction — assign_rarity_types","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"function classifies species discrete rarity types based combinations rarity axes characterizing restrictions global model discretized rarity. uses k-means clustering percentile-based thresholding determine rarity dimension rarity (+ rare - common).","code":""},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"","code":"assign_rarity_types(   df,   models_to_run,   slope_factor = 1,   thresholds = list(GR = 0.15, GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.9, PL = 0.9),   directions = list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR = \"high\", PL =     \"high\"),   k_means = FALSE )"},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"df data frame containing species-level rarity dimensions. Must include one row per species columns matching axes listed thresholds /models_to_run. models_to_run character vector restrictions. Custom model names parsed dynamically. slope_factor numeric value passed find_optimal_k() determining optimal number k clusters based steepness slope. Default 1. thresholds named list numeric values representing percentile cutoff axis. Default thresholds mark bottom 15% geographic rarity top 10% functional phylogenetic rarity. Custom dimensions rarity must thresholded user. directions named list specifying whether rarity associated \"low\" \"high\" values dimension unspecified, function defaults \"low\" \"GR\" \"GL\", \"high\" axes. Users can specify subset axes override defaults. k_means Logical; TRUE, thresholds computed using k-means clustering instead percentile cutoffs.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"data frame species-level rarity classifications. includes raw values rarity flags axis rarity classifications restriction.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"Thresholds can derived either percentile cutoffs k-means clustering, controlled k_means. K-means clustering applied axis least 5 non-NA values; otherwise, percentile cutoffs used fallback. Missing values (NAs) axis data ignored threshold calculations. Composite rarity labels generated passing species' axis flags map_est_types().","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"Alivia G. Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GDRarity/reference/assign_rarity_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign rarity types based on rarity restriction — assign_rarity_types","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   species = c(\"Species1\", \"Species2\", \"Species3\"),   GR = c(0.02, 0.6, 0.1),   FR = c(0.95, 0.2, 0.91),   PR = c(0.92, 0.3, 0.85) )  classified <- assign_rarity_types(   df = data,   models_to_run = c(\"GRFR\", \"EER\"),   slope_factor = 1,   k_means = FALSE,   thresholds = list(GR = 0.15, GL = 0.15,                                  FR = 0.75, FL = 0.9,                                  PR = 0.90, PL = 0.90),   directions = list(PR = \"low\") ) print(classified) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/avg_evol_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","title":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","text":"Computes average evolutionary distinctiveness (ED) species based rooted, time-calibrated phylogenetic tree. ED can calculated either across full tree across multiple evolutionary time slices.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/avg_evol_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","text":"","code":"avg_evol_dist(   phy,   data_frame,   species_col = \"species\",   taxon = NULL,   time = TRUE,   time_slices = c(25, 50, 75, 100, 115),   num_cores = 1 )"},{"path":"https://anytko.github.io/GDRarity/reference/avg_evol_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","text":"phy rooted, time-calibrated phylogenetic tree (phylo object). Branch lengths must reflect time (e.g., millions years). data_frame data frame containing species interest. Must include column species names. species_col character string specifying name species column data_frame. Default \"species\". taxon Optional character vector specifying taxa (species) compute ED . NULL (default), unique species data_frame used. time Logical; FALSE, ED calculated across full tree. TRUE, ED calculated across multiple evolutionary time slices. Default TRUE time_slices Numeric vector time depths (millions years ago, MYA) slice tree. Default c(25, 50, 75, 100, 115). Values must less root age phy. Ultrametric trees recommended. num_cores Number CPU cores use parallel processing. Default 1. recommend increasing faster computation.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/avg_evol_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","text":"data.frame two columns: species column (name matches species_col). ED — average evolutionary distinctiveness.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/avg_evol_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","text":"Evolutionary distinctiveness (ED) computed using \"fair.proportion\"method picante. time = TRUE, phylogeny sliced time depth using phytools::treeSlice() ED computed slice. mean ED across slices returned species. Calculating ED several evolutionary depths captures distinct species deep vs. shallow time scales. Parallel processing supported via foreach doParallel.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/avg_evol_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate average evolutionary distinctiveness (ED) for a set of species — avg_evol_dist","text":"","code":"# Generate a phylogeny set.seed(123) random_phy <- ape::rtree(n = 7) random_phy$tip.label <- c(\"Acer_campestre\", \"Acer_monspessulanum\",                           \"Acer_negundo\", \"Acer_opalus\",                           \"Acer_platanoides\", \"Acer_pseudoplatanus\",                           \"Acer_saccharinum\")  # Create a dataframe of species maple_data <- data.frame(species = random_phy$tip.label)  # Compute ED using time slices ed_results <- avg_evol_dist(phy = random_phy,                             data_frame = maple_data,                             species_col = \"species\",                             num_cores = 1,                             time_slices = c(0.5, 1, 1.5)) #> Warning: The phylogeny is not ultrametric. Some species may not be present at chosen time slices and will return NA.  print(ed_results) #>               species         ED #> 1      Acer_campestre 0.19265958 #> 2 Acer_monspessulanum 0.04205953 #> 3        Acer_negundo 0.26781128 #> 4         Acer_opalus 1.18458392 #> 5    Acer_platanoides 1.53834688 #> 6 Acer_pseudoplatanus 0.85338120 #> 7    Acer_saccharinum 0.63902031"},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_BIEN.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","title":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","text":"Fetches trait data given plant species BIEN database, cleans , merges multiple traits single dataframe.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_BIEN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","text":"","code":"build_trait_data_BIEN(   species,   traits,   remove_outliers = FALSE,   outlier_threshold = 3,   author_info = FALSE,   max_retries = 3 )"},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_BIEN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","text":"species character string specifying species interest. traits character vector specifying trait names retrieve BIEN. Possible traits include: \"diameter breast height (1.3 m) (cm)\" \"flower color\" \"flower pollination syndrome\" \"fruit type\" \"inflorescence length\" \"leaf area (mm2)\" \"leaf area per leaf dry mass (m2.kg-1)\" \"leaf carbon content per leaf dry mass (mg.g-1)\" \"leaf carbon content per leaf nitrogen content\" \"leaf compoundness\" \"leaf dry mass (g)\" \"leaf dry mass per leaf fresh mass (mg.g-1)\" \"leaf fresh mass\" \"Leaf lamina fracture toughness\" \"leaf life span (months)\" \"leaf nitrogen content per leaf area (kg.m-2)\" \"leaf nitrogen content per leaf dry mass (mg.g-1)\" \"leaf phosphorus content per leaf area (g.m-2)\" \"leaf phosphorus content per leaf dry mass (mg.g-1)\" \"leaf photosynthetic rate per leaf area (Âµmol.m-2.s-1)\" \"leaf photosynthetic rate per leaf dry mass (Âµmol.g-1.s-1)\" \"leaf relative growth rate\" \"leaf stomatal conductance H2O per leaf area (mol.H2O.m-2.s-1)\" \"leaf stomatal conductance per leaf area\" \"leaf thickness\" \"longest whole plant longevity (years)\" \"maximum fruit length\" \"maximum leaf length\" \"maximum leaf width\" \"maximum whole plant height\" \"maximum whole plant longevity\" \"minimum fruit length\" \"minimum leaf length\" \"minimum leaf width\" \"minimum whole plant height\" \"plant flowering begin (month)\" \"plant flowering duration (month)\" \"plant fruiting duration\" \"root dry mass\" \"seed length\" \"seed mass (mg)\" \"stem dry mass\" \"stem relative growth rate\" \"stem wood density (g.cm-3)\" \"vessel lumen area (mm2)\" \"vessel number (vessels mm-2)\" \"whole plant dispersal syndrome\" \"whole plant growth form\" \"whole plant growth form diversity\" \"whole plant height (m)\" \"whole plant primary juvenile period length (years)\" \"whole plant sexual system\" \"whole plant vegetative phenology\" \"whole plant woodiness\" remove_outliers Logical. TRUE, removes outliers based specified threshold. Default FALSE. outlier_threshold Numeric. number standard deviations mean classify value outlier. Default 3. author_info Logical. TRUE, includes authorship contact information data collection. Default FALSE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_BIEN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","text":"dataframe containing cleaned trait data columns: scrubbed_species_binomial one column per requested trait. Optional columns include: project_pi project_pi_contacts.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_BIEN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","text":"BIEN pulls wide variety trait databases, making likely include information broader range species compared region-specific databases. example, LEDA trait database (Northwestern European specific) SLA seed mass data 8 total species beloning Acer Pinus genera; BIEN trait database SLA seed mass data 27 species beloning genera.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_BIEN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Clean BIEN Trait Data for a Species — build_trait_data_BIEN","text":"","code":"if (FALSE) { # \\dontrun{ trait_df <- build_trait_data_BIEN(species = \"Pinus strobus\", traits = c(\"leaf area per leaf dry mass\", \"seed mass\"), remove_outliers = TRUE, outlier_threshold = 2)  print(trait_df) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"Build dataframe trait data various plant species interest using LEDA trait database.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"","code":"build_trait_data_LEDA(columns_to_select, genera = NULL)"},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"columns_to_select character vector specifying one trait columns include output. Valid options : \"SLA\" (specific leaf area, mm^2/mg), \"seed_mass\" (mg), \"leaf_mass\" (mg), \"canopy_height\" (m). function return error specified columns available. genera Optional character vector specifying genera filter . NULL (default), filtering applied. Genera matched underscore notation species names (e.g., \"Acer_\" matches Acer species).","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"dataframe including mean trait data species species choice respective columns titled trait name.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"function reads trait data four different data files, including SLA (Specific Leaf Area), seed mass, leaf mass, canopy height. combines data frames single data frame based species name.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"Kleyer M, et al. (2008). “LEDA Traitbase: database life-history traits Northwest European Flora.” Journal Ecology. doi:10.1111/j.1365-2745.2008.01430.x .","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GDRarity/reference/build_trait_data_LEDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Trait Data from the LEDA Traitbase — build_trait_data_LEDA","text":"","code":"# Build dataframe using specific leaf area (SLA) trait data across all available species all_traits <- build_trait_data(columns_to_select = \"SLA\") #> Error in build_trait_data(columns_to_select = \"SLA\"): could not find function \"build_trait_data\"  # Build dataframe using seed mass trait data across maple species maple_traits <- build_trait_data(columns_to_select = \"seed_mass\", genera = \"Acer_\") #> Error in build_trait_data(columns_to_select = \"seed_mass\", genera = \"Acer_\"): could not find function \"build_trait_data\" print(maple_traits) #> Error: object 'maple_traits' not found  # Build dataframe using canopy height for major tree species tree_traits <- build_trait_data_LEDA(columns_to_select = \"canopy_height\", genera = c(\"Acer_\", \"Quercus_\", \"Populus_\", \"Ulmus_\", \"Pinus_\", \"Alnus_\", \"Betula_\", \"Salix_\", \"Abies_\", \"Fraxinus_\", \"Tsuga_\", \"Prunus_\")) print(tree_traits) #> # A tibble: 105 × 2 #>    species_name        canopy_height #>    <chr>                       <dbl> #>  1 Abies_alba                   50   #>  2 Abies_grandis                50   #>  3 Abies_nordmanniana           30   #>  4 Acer_campestre               13.4 #>  5 Acer_monspessulanum          11   #>  6 Acer_negundo                 11.5 #>  7 Acer_opalus                  12   #>  8 Acer_platanoides             26.2 #>  9 Acer_pseudoplatanus          27.3 #> 10 Acer_saccharinum             40   #> # ℹ 95 more rows"},{"path":"https://anytko.github.io/GDRarity/reference/calc_range_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate range sizes for multiple species — calc_range_size","title":"Calculate range sizes for multiple species — calc_range_size","text":"function calculates range sizes (sq km) multiple species retrieving occurrence data GBIF, generating convex hulls, clipping continent boundaries. uses parallel processing handle multiple species efficiently.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calc_range_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate range sizes for multiple species — calc_range_size","text":"","code":"calc_range_size(   data_frame,   species_col = \"species_name\",   num_cores = 1,   min_points = 5,   min_distance = 1,   gbif_limit = 2000,   continent_file = NULL )"},{"path":"https://anytko.github.io/GDRarity/reference/calc_range_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate range sizes for multiple species — calc_range_size","text":"data_frame data.frame containing scienfic names species column named species_name. species_col character string indicating column data_frame contains species names. Default \"species_name\". num_cores number cores use parallel processing. Default 1 (parallel processing). min_points minimum number points required form range cluster. Default 5. min_distance minimum distance points range cluster. Default 1 epsilon (eps). gbif_limit maximum number GBIF records retrieve per species. Default 2000. continent_file Optional path URL GeoJSON shapefile (.shp .shx) containing continent country boundaries. NULL (default), Natural Earth continent data retrieved via get_continent_sf().","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calc_range_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate range sizes for multiple species — calc_range_size","text":"data.frame two columns: species_col — species name. range_size — total range size square kilometers.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calc_range_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate range sizes for multiple species — calc_range_size","text":"function wraps following internal steps: Retrieves GBIF occurrence data via get_range_convex_hulls(). Reads continent boundaries via get_continent_sf() user-supplied file. Clips convex hull polygons land boundaries using clip_polygons_to_land(). Calculates total polygon area (km²) per species using range_sizes(). Parallelization handled via future future.apply. species processed independently requires internet accesss.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calc_range_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate range sizes for multiple species — calc_range_size","text":"","code":"# Generate a test dataframe with species Abies cephalonica if (FALSE) { # \\dontrun{ test_data <- data.frame(species = c(\"Abies cephalonica\"))  # Generate range sizes for each speices range_size <- calc_range_size(data_frame = test_data, min_points = 4, species_col = \"species\") print(range_size) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/calculate_phylo_mpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","title":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","text":"function computes mean pairwise phylogenetic distance (MPD) species within sites, optionally weighting species abundance scaling values relative maximum phylogenetic distance site.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calculate_phylo_mpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","text":"","code":"calculate_phylo_mpd(phy, df, relative = TRUE, weighted = TRUE)"},{"path":"https://anytko.github.io/GDRarity/reference/calculate_phylo_mpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","text":"phy phylogenetic tree class phylo. Must contain species present df. df data frame containing species occurrence abundance data. Must include columns: species, site, presence_absence (1 presence, 0 absence). relative Logical; TRUE (default), MPD values scaled maximum pairwise distance observed site's phylogeny, resulting values 0 1. weighted Logical; TRUE (default), MPD abundance-weighted per species. FALSE, unweighted MPD (simple mean distances) calculated.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calculate_phylo_mpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","text":"data frame includes rows df augmented new column EU (Evolutionary Uniqueness), representing (scaled) mean pairwise phylogenetic distance species within site. Species fewer two co-occurring species site receive NA.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calculate_phylo_mpd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","text":"function repeatedly prunes phylogeny include species present site. calculates MPD species averaging (abundance-weighting) distances species present site. Results scaled relative maximum distance relative = TRUE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/calculate_phylo_mpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Phylogenetic Mean Pairwise Distance (MPD) per Species per Site — calculate_phylo_mpd","text":"","code":"phy <- rtree(4) #> Error in rtree(4): could not find function \"rtree\" phy$tip.label <- c(\"Species1\", \"Species2\", \"Species3\", \"Species4\") #> Error: object 'phy' not found  df <- data.frame(   species = c(\"Species1\", \"Species2\", \"Species3\", \"Species4\", \"Species1\"),   site = c(\"SiteA\", \"SiteA\", \"SiteB\", \"SiteB\", \"SiteB\"),   presence_absence = c(1, 1, 1, 1, 1),   abundance = c(10, 5, 3, 8, 2) )  result <- calculate_phylo_mpd(phy, df, relative = TRUE, weighted = TRUE) #> Error: object 'phy' not found print(result) #> Error: object 'result' not found"},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Species Convex Hulls Against Biome Data — check_biomes","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"Checks biomes intersected convex hulls species distributions. default, uses preloaded biome shapefile containing four biomes: Humid Tropics, Dry Tropics, Temperate, Boreal. Users can optionally supply biome shapefile sf object.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"","code":"check_biomes(convex_hulls, biome_sf = NULL)"},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"convex_hulls named list convex hulls species. element list sf polygon objects representing convex hulls species' distribution. biome_sf Optional sf object representing biome polygons. provided, default biome shapefile (biomes.shp) included package used. Custom biome data must include column named \"BIOME\".","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"dataframe species_name one column per biome. Values 1 species' convex hull intersects biome, 0 otherwise.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"function ensures biome data species convex hulls EPSG:4326 (WGS84) coordinate reference system. CRS missing, assigned automatically. Polygons validated st_make_valid() intersection checks. Returns dataframe row corresponds species, biome column contains 1 intersection occurs, otherwise 0.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"Custom biome data must \"BIOME\" column biome names.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"Hansen M, et al. (2010). “Quantification global gross forest cover loss.” Proceedings National Academy Sciences U.S... doi:10.1073/pnas.0912668107 .","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_biomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze Species Convex Hulls Against Biome Data — check_biomes","text":"","code":"# Example: Checking biome intersections for two Abies species test_data <- data.frame(species_name = c(\"Abies_cephalonica\", \"Abies_firma\")) convex_hulls_abies <- get_range_convex_hulls(test_data) #> Processing species: Abies_cephalonica #> Processing species: Abies_firma abies_biomes <- check_biomes(convex_hulls_abies) #> Reading layer `biomes' from data source  #>   `/home/runner/work/_temp/Library/GDRarity/extdata/biomes.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 4 features and 2 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -172.724 ymin: -55.50009 xmax: 179.7352 ymax: 70.00011 #> CRS:           NA print(abies_biomes) #>   Humid Tropics Dry Tropics Temperate Boreal      species_name #> 1             0           0         1      0 Abies_cephalonica #> 2             1           0         1      0       Abies_firma"},{"path":"https://anytko.github.io/GDRarity/reference/check_continents.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Range Intersections with Continent Polygons — check_continents","title":"Check Range Intersections with Continent Polygons — check_continents","text":"function checks whether polygons representing species ranges intersect polygons representing continents. returns dataframe indicating species ranges intersect continents.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_continents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Range Intersections with Continent Polygons — check_continents","text":"","code":"check_continents(convex_hulls, continent_sf)"},{"path":"https://anytko.github.io/GDRarity/reference/check_continents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Range Intersections with Continent Polygons — check_continents","text":"convex_hulls nested list convex hulls species ranges. Can generated using GeoFunPhy::get_range_convex_hulls() clip_polygons_to_land(). continent_sf sf object containing polygons representing continents. Can generated using GeoFunPhy::get_continent_sf()","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_continents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Range Intersections with Continent Polygons — check_continents","text":"dataframe species names rows continent names columns. cell contains 1 corresponding species range intersects continent polygon, 0 otherwise.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_continents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Range Intersections with Continent Polygons — check_continents","text":"function assumes species range polygons continent polygons coordinate reference system. range continent polygons invalid, automatically made valid using st_make_valid. function returns dataframe row corresponds species, column corresponds continent. value 1 indicates species range intersects continent polygon, 0 indicates intersection.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/check_continents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Range Intersections with Continent Polygons — check_continents","text":"","code":"# Generate a dataframe for species Abies cephalonica and Abies firma test_data <- data.frame(species_name = c(\"Abies_cephalonica\", \"Abies_firma\"))  # Get continent bounds continent_bounds <- get_continent_sf() #> Error in get_continent_sf(): Default continent GeoJSON file not found. Ensure the file is in the 'extdata' directory of the package.  # Find convex hulls for Abies cephalonica and Abies firma test_hulls <- GeoFunPhy::get_range_convex_hulls(test_data) #> Error in loadNamespace(x): there is no package called ‘GeoFunPhy’  # Clip convex hulls to continent bounds clipped_polys <- clip_polygons_to_land(test_hulls, continent_bounds) #> Error: object 'test_hulls' not found  # Check intersections with continents - Abies cephalonica is found in Europe and Abies firma is found in Asia intersections <- check_continents(convex_hulls = clipped_polys, continent_sf = continent_bounds) #> Error: object 'continent_bounds' not found print(intersections) #> Error: object 'intersections' not found"},{"path":"https://anytko.github.io/GDRarity/reference/clean_trait_data_BIEN.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean BIEN Trait Data — clean_trait_data_BIEN","title":"Clean BIEN Trait Data — clean_trait_data_BIEN","text":"Cleans processes plant trait data BIEN handling missing values, removing duplicates,computing mean trait values per species, optionally removing outliers.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clean_trait_data_BIEN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean BIEN Trait Data — clean_trait_data_BIEN","text":"","code":"clean_trait_data_BIEN(   data,   remove_outliers = FALSE,   outlier_threshold = 3,   author_info = FALSE )"},{"path":"https://anytko.github.io/GDRarity/reference/clean_trait_data_BIEN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean BIEN Trait Data — clean_trait_data_BIEN","text":"data dataframe containing plant trait data. Must include columns: scrubbed_species_binomial, trait_name, trait_value, unit, method, url_source. remove_outliers Logical. TRUE, removes outliers based specified threshold. Default FALSE. outlier_threshold Numeric. number standard deviations mean classify value outlier. Default 3. author_info Logical. TRUE, includes authorship contact information data collection. Default FALSE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clean_trait_data_BIEN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean BIEN Trait Data — clean_trait_data_BIEN","text":"cleaned dataframe columns: scrubbed_species_binomial mean_trait_value. Optional columns include: project_pi project_pi_contacts.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clean_trait_data_BIEN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean BIEN Trait Data — clean_trait_data_BIEN","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(scrubbed_species_binomial = c(\"Quercus robur\", \"Quercus robur\", \"Pinus sylvestris\"), trait_name = c(\"Leaf Area\", \"Leaf Area\", \"Needle Length\"), trait_value = c(20, 22, 5), unit = c(\"cm2\", \"cm2\", \"cm\"),method = c(\"measurement\", \"measurement\", \"observation\"), url_source = c(\"source1\", \"source2\", \"source3\"))  cleaned_data <- clean_trait_data_BIEN(data, remove_outliers = FALSE)  print(cleaned_data) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/clip_polygons_to_land.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip species range polygons to land boundaries — clip_polygons_to_land","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"function uses continent GeoJSON shape file (.shp & .shx) file clip range polygons land boundaries.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clip_polygons_to_land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"","code":"clip_polygons_to_land(convex_hulls, continent_sf)"},{"path":"https://anytko.github.io/GDRarity/reference/clip_polygons_to_land.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"convex_hulls nested list sf polygon objects representing convex hulls species ranges. Typically generated using get_range_convex_hulls(). continent_sf sf object containing continent polygons (e.g., Natural Earth GeoJSON shapefiles). Coordinate reference systems matched automatically","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clip_polygons_to_land.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"nested list sf polygon objects representing clipped species ranges. top-level list element corresponds species; sublist contains one clipped polygons species.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clip_polygons_to_land.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"function sets CRS input polygon match continent_sf using sf::st_crs(), uses rmapshaper::ms_clip() perform clipping operation. Invalid geometries fixed sf::st_make_valid(). species range intersect land (.e., entirely oceanic polygon), removed output. Errors clipping caught silently ignored.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/clip_polygons_to_land.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clip species range polygons to land boundaries — clip_polygons_to_land","text":"","code":"# Generate a test dataframe with species Abies cephalonica test_data <- data.frame(species_name = c(\"Acer_campestre\")) # Retrieve the unclipped range convex hulls  unclipped_hulls <- get_range_convex_hulls(test_data) #> Processing species: Acer_campestre # Get continent data from a GeoJSON file continent_sf_example <- get_continent_sf() #> Error in get_continent_sf(): Default continent GeoJSON file not found. Ensure the file is in the 'extdata' directory of the package. # Clip the range polygons to continent bounds  clipped_polygons <- clip_polygons_to_land(convex_hulls = unclipped_hulls, continent_sf = continent_sf_example) #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation print(clipped_polygons) #> $Acer_campestre #> named list() #>"},{"path":"https://anytko.github.io/GDRarity/reference/collapse_BIEN_traits.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","title":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","text":"Summarizes collapses BIEN trait data species, combining multiple trait values author information.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/collapse_BIEN_traits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","text":"","code":"collapse_BIEN_traits(   df,   species_col = \"species_name\",   author_cols = c(\"project_pi\", \"project_pi_contacts\") )"},{"path":"https://anytko.github.io/GDRarity/reference/collapse_BIEN_traits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","text":"df data frame containing BIEN trait data, one trait columns optional author info columns. species_col string specifying name species identifier column df. Default \"species_name\". author_cols character vector column names df contain author project information concatenated. Default c(\"project_pi\", \"project_pi_contacts\").","code":""},{"path":"https://anytko.github.io/GDRarity/reference/collapse_BIEN_traits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","text":"data frame grouped species author columns collapsed semicolon-separated strings, numeric trait columns averaged per species (ignoring NAs), non-numeric trait columns concatenated unique values separated semicolons.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/collapse_BIEN_traits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","text":"function groups data frame species identifier column, concatenates unique author information columns, trait columns selects first unique non-missing value per species.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/collapse_BIEN_traits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse BIEN Trait Data by Species — collapse_BIEN_traits","text":"","code":"if (FALSE) { # \\dontrun{ trait_data <- tibble(  scrubbed_species_binomial = c(\"Pinus sylvestris\", \"Pinus sylvestris\", \"Pinus sylvestris\",                               \"Quercus robur\", \"Quercus robur\"),  project_pi = c(\"Dr. Smith\", \"Dr. Smith\", \"Dr. Jones\", \"Dr. Brown\", NA),  project_pi_contacts = c(\"smith@example.com\", \"smith@example.com\", \"jones@example.com\", \"brown@example.com\", NA),  leaf_area = c(50, 50, 52, 45, 47),  seed_mass = c(100, 100, NA, 120, 115),  flower_color = c(\"yellow\", \"yellow\", \"green\", \"brown\", \"brown\") ) # Use the collapse_BIEN_traits function to collapse by species collapsed_df <- collapse_BIEN_traits(df = trait_data, species_col = \"scrubbed_species_binomial\") print(collapsed_df) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"function calculates average scarcity index (Si) species across sites using relative abundance data funrar package's scarcity_stack() function.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"","code":"compute_mean_si(   data,   species_col = \"species\",   site_col = \"site\",   abundance_col = \"abundance\" )"},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"data data frame containing species, site, abundance information. species_col Name column data indicating species identity. Defaults \"species\". site_col Name column data indicating site identity. Defaults \"site\". abundance_col Name column data containing species abundance per site. Defaults \"abundance\".","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"data frame species corresponding mean Si values.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"first computes relative abundances within site, applies scarcity_stack() funrar package, averages Si values species. function uses funrar::scarcity_stack() compute scarcity index (Si) per species per site based relative abundance, returns average Si per species.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"function requires funrar package. use function published work, please cite funrar package using: citation(\"funrar\").","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_mean_si.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Mean Scarcity Index (Si) for Each Species — compute_mean_si","text":"","code":"df <- data.frame(   species = c(\"sp1\", \"sp2\", \"sp1\", \"sp3\", \"sp2\", \"sp3\"),   site = c(\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"),   abundance = c(10, 5, 3, 8, 2, 7) ) compute_mean_si(df) #> # A tibble: 3 × 2 #>   species    Si #>   <chr>   <dbl> #> 1 sp1     0.541 #> 2 sp2     0.682 #> 3 sp3     0.353"},{"path":"https://anytko.github.io/GDRarity/reference/compute_wcss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","title":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","text":"Compute Within-Cluster Sum Squares (WCSS) given variable range cluster values (k) using k-means clustering.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_wcss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","text":"","code":"compute_wcss(data, variable, k_values, seed = 42)"},{"path":"https://anytko.github.io/GDRarity/reference/compute_wcss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","text":"data data frame containing data clustering. variable variable data frame used clustering. Use name column \"\". k_values vector integers specifying number clusters (k) considered.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_wcss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","text":"numeric vector containing WCSS values value k.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/compute_wcss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","text":"function computes Within-Cluster Sum Squares (WCSS) value k provided k_values parameter using k-means clustering. returns numeric vector element represents WCSS value corresponding value k.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/compute_wcss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Within-Cluster Sum of Squares (WCSS) — compute_wcss","text":"","code":"# Create a dataframe of maple ash and pine species with range size, average evolutionary distinctiveness, and functional distinctiveness values species_names <- c(\"Abies_alba\", \"Abies_grandis\", \"Abies_nordmanniana\", \"Acer_campestre\", \"Acer_monspessulanum\", \"Acer_negundo\", \"Acer_opalus\", \"Acer_platanoides\", \"Acer_pseudoplatanus\", \"Acer_saccharinum\", \"Fraxinus_angustifolia\", \"Fraxinus_excelsior\", \"Fraxinus_ornus\", \"Fraxinus_pennsylvanica\", \"Pinus_banksiana\", \"Pinus_cembra\", \"Pinus_nigra\", \"Pinus_pinaster\", \"Pinus_pinea\", \"Pinus_ponderosa\", \"Pinus_strobus\", \"Pinus_sylvestris\", \"Pinus_uncinata\")  FD_values <- runif(min = -2, max = 2, n=23)  range_values <- runif(min = -2, max = 2, n=23)  mean_evol_dist_values <- runif(min = -2, max = 2, n=23)  forest_data <- data.frame(species_name = species_names, fun_dist = FD_values, range_size = range_values, mean_evol_dist = mean_evol_dist_values)  # Calculate the 8 wcss values for range size  wcss_range <- compute_wcss(data = forest_data, variable = \"range_size\", k_values= c(1, 2, 3, 4, 5, 6, 7, 8))  print(wcss_range) #> [1] 28.3447278  6.8320276  4.1195896  1.2525934  0.8129789  0.6131270  0.5575771 #> [8]  0.4475473  # Calculate the 8 wcss values for evolutionary distinctiveness wcss_evol_dist <- compute_wcss(data = forest_data, variable = \"mean_evol_dist\", k_values= c(1, 2, 3, 4, 5, 6, 7, 8))  print(wcss_evol_dist) #> [1] 30.1670067  8.6043512  2.5742941  1.8581015  0.6582987  0.3645319  0.3576668 #> [8]  0.2289784  # Calculate the 8 wcss values for functional distinctiveness wcss_fun_dist <- compute_wcss(data = forest_data, variable = \"fun_dist\", k_values= c(1, 2, 3, 4, 5, 6, 7, 8))  print(wcss_fun_dist) #> [1] 28.6863690  5.2267493  1.6557100  1.3944138  0.9855532  0.8987467  0.8365107 #> [8]  0.2074878"},{"path":"https://anytko.github.io/GDRarity/reference/eval_restriction_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Restriction Performance Using ANOVA — eval_restriction_performance","title":"Evaluate Restriction Performance Using ANOVA — eval_restriction_performance","text":"Applies linear models restriction list data frames, testing ability restrictions explain specified response variables. Extracts ANOVA statistics model summaries.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/eval_restriction_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Restriction Performance Using ANOVA — eval_restriction_performance","text":"","code":"eval_restriction_performance(df_list, response_vars)"},{"path":"https://anytko.github.io/GDRarity/reference/eval_restriction_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Restriction Performance Using ANOVA — eval_restriction_performance","text":"df_list List data frames containing species data restrictions (starting \"_flag\" columns). response_vars Character vector response variable names test linear models. Must included df_list.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/eval_restriction_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Restriction Performance Using ANOVA — eval_restriction_performance","text":"data frame combining ANOVA results models response variables, columns: method: Identifier combo/data frame. model: Restriction name. response_variable: Response variable tested. AIC: Akaike Information Criterion value model. df: Degrees freedom used ANOVA. F_statistic: F statistic ANOVA. p_value: p-value ANOVA F-test. multiple_R2: Multiple R-squared model. adjusted_R2: Adjusted R-squared model.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/eval_restriction_performance.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Evaluate Restriction Performance Using ANOVA — eval_restriction_performance","text":"run highly multidimensional models GDR, number species must outnumber possible rarity types (.e., least 63 species GDR) ensure linear models work correctly.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/find_optimal_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Optimal Number of Clusters (k) Using the Elbow Method — find_optimal_k","title":"Find the Optimal Number of Clusters (k) Using the Elbow Method — find_optimal_k","text":"function computes optimal number clusters (k) given dataset based within-cluster sum squares (WCSS) values. optimal k determined identifying first k WCSS falls specified slope threshold derived standard deviation differences consecutive WCSS values.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/find_optimal_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Optimal Number of Clusters (k) Using the Elbow Method — find_optimal_k","text":"","code":"find_optimal_k(data, variable, k_max = 10, slope_factor = 0.5, plot = FALSE)"},{"path":"https://anytko.github.io/GDRarity/reference/find_optimal_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Optimal Number of Clusters (k) Using the Elbow Method — find_optimal_k","text":"data data frame containing data clustered. variable string specifying column name within dataframe clustered. k_max integer specifying maximum number clusters consider (default 10). slope_factor numeric value scale standard deviation first derivative slope threshold determination (default 0.5). strongly recommend using slope >= 1 large datasets allow flexibility thresholding. plot logical indicating whether generate plot WCSS values number clusters threshold value (default FALSE). know slope_factor use, recommend using plot = TRUE visualize data.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/find_optimal_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Optimal Number of Clusters (k) Using the Elbow Method — find_optimal_k","text":"list containing: optimal_k: integer indicating optimal number clusters. slopes: data frame WCSS values k. slope_threshold: calculated slope threshold. plot: (optional) ggplot object plot = TRUE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/find_optimal_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Optimal Number of Clusters (k) Using the Elbow Method — find_optimal_k","text":"","code":"set.seed(123) r_norm_data <- data.frame(normal_dist = rnorm(100, mean = 50, sd = 10))  result <- find_optimal_k(r_norm_data, variable = \"normal_dist\", k_max = 15, plot = TRUE) print(result$optimal_k) #> [1] 5"},{"path":"https://anytko.github.io/GDRarity/reference/fun_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","title":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","text":"Computes relative functional distinctiveness species based multiple traits. Traits median-centered computing pairwise Euclidean distances, FD calculated mean distance species others.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/fun_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","text":"","code":"fun_dist(data_frame, trait_columns, species_col = \"species\")"},{"path":"https://anytko.github.io/GDRarity/reference/fun_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","text":"data_frame data frame containing species data column species names. trait_columns Character vector specifying names numeric trait columns use FD calculation. Must contain least two traits. species_col Character string specifying column data_frame contains species names. Default \"species\".","code":""},{"path":"https://anytko.github.io/GDRarity/reference/fun_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","text":"data.frame one row per species containing: species_col — species name. fun_dist — functional distinctiveness value.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/fun_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","text":"Functional distinctiveness (FD) species calculated mean distances species dataset. relative measure — species can functionally distinct within subset species necessarily across species globally.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/fun_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Relative Functional Distinctiveness (FD) from Trait Data — fun_dist","text":"","code":"# Create a dataframe of maple species with trait data (SLA, height, seed mass) maple_data <- data.frame(species_name = c(\"Acer campestre\", \"Acer monspessulanum\", \"Acer negundo\", \"Acer opalus\", \"Acer platanoides\", \"Acer pseudoplatanus\", \"Acer saccharinum\"), SLA = c(5, 15, 6, 11, 23.5, 52, 4), height = c(50, 65, 28, 70, 68, 43, 55), seed_mass = c(1.2, 0.57, 2, 8.5, 0.54, 2.3, 1.9))  FD_results <- fun_dist(data_frame = maple_data, trait_columns = c(\"SLA\", \"height\", \"seed_mass\")) #> Error in dplyr::rename(., species_name = !!species_sym): Can't rename columns that don't exist. #> ✖ Column `species` doesn't exist.  print(FD_results) #> Error: object 'FD_results' not found"},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Discretized Rarity Pipeline — gdrare_pipeline","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"Runs full global model discretized rarity (GDR) restrictions set species, model preparation rarity axis calculation final rarity type assignment.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"","code":"gdrare_pipeline(   species_df,   species_col = \"species\",   abundance_df = NULL,   abundance = TRUE,   phylo = NULL,   use_internal_phylo = TRUE,   internal_phylo_name = \"ALLMB\",   trait_cols = NULL,   additional_dimensions = NULL,   use_most_complete_model = FALSE,   geo_rarity_method = c(\"taxonomic\", \"range\"),   fun_rarity_method = c(\"min_distance\", \"mean_distance\", \"none\"),   k_means = FALSE,   time = FALSE,   time_slices = NULL,   relative = TRUE,   min_dbscan_points = 5,   min_dbscan_distance = 1,   gbif_limit = 2000,   num_cores = 1,   site_col = \"site\",   abundance_col = \"abundance\",   slope_factor = 1,   model = NULL,   thresholds = list(GR = 0.15, GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.9, PL = 0.9),   directions = list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR = \"high\", PL =     \"high\") )"},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"species_df data frame containing species-level data, including species names optionally trait, abundance, site information. species_col name column species_df containing species names. Default \"species\". abundance_df Optional data frame containing site--species abundance data. abundance Logical; TRUE, include abundance weighting calculating community rarity metrics. Default TRUE. phylo phylogenetic tree class phylo. NULL use_internal_phylo = TRUE, default phylogeny used. use_internal_phylo Logical; TRUE (default) phylo provided, function attempt retrieve internal seed plant phylogeny. internal_phylo_name Character; name internal tree use (e.g., \"ALLMB\"). trait_cols Character vector specifying trait columns species_df used functional rarity calculations. additional_dimensions Optional list additional custom rarity axes include analysis. use_most_complete_model Logical; TRUE, prioritize using rarity model maximizes species coverage across rarity dimensions. Default FALSE. geo_rarity_method Method calculate geographic rarity. Options: \"taxonomic\" (based site occupancy), \"range\" (based convex hull/range size). Default \"taxonomic\". fun_rarity_method Method functional rarity. Options: \"min_distance\", \"mean_distance\", \"none\" exclude functional rarity. Default \"min_distance\". k_means Logical; TRUE, use k-means clustering define rarity thresholds. Default FALSE. time Logical; TRUE, run rarity analyses time slice (e.g., paleo data). Default FALSE. time_slices Optional vector time points use time = TRUE. relative Logical; whether use relative distinctiveness rarity scores (e.g., scaled within communities). Default TRUE. min_dbscan_points Minimum number points required DBSCAN range calculation. Used estimating regional geographic rarity occurrence data. Default 5. min_dbscan_distance Minimum distance (decimal degrees) used DBSCAN-based convex hull calculations. Default 1. gbif_limit Maximum number records pull per species GBIF estimating range-based regional geographic rarity. Default 2000. num_cores Number cores use parallel computation. Default 1. site_col Column name abundance_df identifies sites. Default \"site\". abundance_col Column name abundance_df contains species abundance values. Default \"abundance\". slope_factor numeric value passed find_optimal_k() adjust steepness elbow curve used determining optimal number clusters. Default 1. model Optional character string naming specific rarity model use. NULL, models inferred based available data. thresholds named list numeric values representing percentile cutoff axis. Default thresholds mark bottom 15% geographic rarity top 10% functional phylogenetic rarity. Custom dimensions rarity must thresholded user. directions named list specifying whether rarity associated \"low\" \"high\" values dimension. unspecified, function defaults \"low\" \"GR\" \"GL\", \"high\" axes. Users can specify subset axes override defaults.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"data frame species-level rarity classifications. includes raw values rarity flags axis rarity classifications restriction.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"function high-level wrapper runs entire GDR workflow. : Prepares rarity restrictions input data. Calculates rarity dimensions. Assigns rarity types.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"Alivia G. Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GDRarity/reference/gdrare_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Discretized Rarity Pipeline — gdrare_pipeline","text":"","code":"if (FALSE) { # \\dontrun{ species <- data.frame(species = c(\"Abies_procera\", \"Alnus_incana\"), trait1 = c(1.2, 3.4), trait2 = c(1.7, 9.8)) abundance <- data.frame(species = c(\"Abies_procera\", \"Alnus_incana\", \"Abies_procera\", \"Alnus_incana\", \"Alnus_incana\"), site = c(\"A\", \"A\", \"B\", \"C\", \"D\"), presence_absence = c(1, 1, 1, 1, 1), abundance = c(10, 5, 15, 3, 7))  classified <- gdrare_pipeline(species_df = species, abundance_df = abundance, trait_cols = c(\"trait1\", \"trait2\"), geo_rarity_method = \"taxonomic\", fun_rarity_method = \"mean_distance\")  print(classified) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/get_best_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Best Methods of Applying Each Restriction Per Response Variable Based on AIC — get_best_methods","title":"Get Best Methods of Applying Each Restriction Per Response Variable Based on AIC — get_best_methods","text":"Groups ANOVA results method, response variable restriction, selects method lowest AIC restriction. Returns sorted data frame best performing methods restriction response variable.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_best_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Best Methods of Applying Each Restriction Per Response Variable Based on AIC — get_best_methods","text":"","code":"get_best_methods(anova_df)"},{"path":"https://anytko.github.io/GDRarity/reference/get_best_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Best Methods of Applying Each Restriction Per Response Variable Based on AIC — get_best_methods","text":"anova_df Data frame ANOVA results, containing least columns 'response_variable', 'model', 'AIC'.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_best_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Best Methods of Applying Each Restriction Per Response Variable Based on AIC — get_best_methods","text":"data frame filtered best methods per response variable restriction, sorted AIC.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_continent_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get continent spatial data from a GeoJSON file — get_continent_sf","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"function reads GeoJSON file given URL, extracts continent information, returns sf object continent polygons.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_continent_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"","code":"get_continent_sf(url = NULL)"},{"path":"https://anytko.github.io/GDRarity/reference/get_continent_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"url Optional URL file path GeoJSON file containing country continent data. NULL (default), function uses embedded Natural Earth continent boundaries package's extdata directory.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_continent_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"sf object : continent — continent name. geometry — polygon geometry continent.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_continent_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get continent spatial data from a GeoJSON file — get_continent_sf","text":"","code":"# Get continent data from a GeoJSON file continent_sf <- get_continent_sf() #> Error in get_continent_sf(): Default continent GeoJSON file not found. Ensure the file is in the 'extdata' directory of the package. print(continent_sf) #> Error: object 'continent_sf' not found"},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Phylogeny of Angiosperms — get_phy_angio","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"Retreive seed plant phylogenies described Smith & Brown 2018 FePhyFoFum github","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"","code":"get_phy_angio(phy_choice)"},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"phy_choice Character string specifying seed plant phylogeny download. Must one : \"ALLMB\": GenBank Open Tree Life taxa backbone Magallón et al. (2015) \"ALLOTB\": GenBank Open Tree Life taxa backbone Open Tree Life version 9.1 \"GBMB\": GenBank taxa backbone Magallón et al. (2015) \"GBOTB\": GenBank taxa backbone Open Tree Life version 9.1","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"rooted phylogenetic tree phylo object used comparative methods","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"function downloads pre-constructed phylogenetic tree big_seed_plant_trees GitHub repository, unzips temporary directory, reads .tre file corresponding selected phy_choice.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"Smith S, Brown J (2018). “Constructing broadly inclusive seed plant phylogeny.” American Journal Botany. doi:10.1002/ajb2.1019 .  Kleyer M, et al. (2008). “LEDA Traitbase: database life-history traits Northwest European Flora.” Journal Ecology. doi:10.1111/j.1365-2745.2008.01430.x .  Magallón S, et al. (2015). “metacalibrated time-tree documents early rise flowering plant phylogenetic diversity.” New Phytologist. doi:10.1111/nph.13264 .","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_phy_angio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Phylogeny of Angiosperms — get_phy_angio","text":"","code":"if (FALSE) { # \\dontrun{ ALLMB_phy <- get_phy_angio(phy_choice = \"ALLMB\")  ALLOTB_phy <- get_phy_angio(phy_choice = \"ALLOTB\")  GMBM_phy <- get_phy_angio(phy_choice = \"GBMB\")  GBOTB_phy <- get_phy_angio(phy_choice = \"GBOTB\") } # }"},{"path":"https://anytko.github.io/GDRarity/reference/get_range_convex_hulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"Retrieves occurrence data species GBIF, clusters spatial points using DBSCAN, generates convex hull polygons cluster.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_range_convex_hulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"","code":"get_range_convex_hulls(   data_frame,   species_col = \"species_name\",   species_name = NULL,   num_cores = 1,   min_points = 5,   min_distance = 1,   gbif_limit = 2000 )"},{"path":"https://anytko.github.io/GDRarity/reference/get_range_convex_hulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"data_frame dataframe containing scientific names species. Must include column named species_name. species_col Character string specifying column data_frame contains species names. Default \"species_name\". species_name optional character vector species names process. Default NULL. NULL, species dataframe processed. num_cores number cores use parallel processing. Default 1 (parallel processing). min_points minimum number points required form range cluster. Default 5. min_distance minimum distance points range cluster. Default 1 epsilon (eps). gbif_limit maximum number GBIF records retrieve per species. Default 2000.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_range_convex_hulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"named list element corresponds species contains list sf polygon objects representing convex hulls.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_range_convex_hulls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"function: Retrieves occurrence records GBIF using rgbif::occ_search(). Filters cleans records (removing invalid coordinates, duplicates, certain basis record types). Clusters spatial points using dbscan::dbscan() eps = min_distance minPts = min_points. Computes convex hull polygons cluster using sf::st_convex_hull(). Parallelization handled via parallel::mclapply() num_cores > 1.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/get_range_convex_hulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Convex Hull Polygons for Species from GBIF Data — get_range_convex_hulls","text":"","code":"# Generate a test dataframe with species Abies cephalonica if (FALSE) { # \\dontrun{ test_data <- data.frame(species_name = c(\"Abies_cephalonica\")) # Retrieve the unclipped range polygons  unclipped_hulls <- get_range_convex_hulls(test_data) print(unclipped_hulls) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/map_est_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Rarity Types to Established Restrictions. — map_est_types","title":"Map Rarity Types to Established Restrictions. — map_est_types","text":"function maps restriction-specific rarity types restrictions \"EER\" \"Functional Rarity\". uses standardized restriction names created via rename_model_code().","code":""},{"path":"https://anytko.github.io/GDRarity/reference/map_est_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Rarity Types to Established Restrictions. — map_est_types","text":"","code":"map_est_types(model, label)"},{"path":"https://anytko.github.io/GDRarity/reference/map_est_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Rarity Types to Established Restrictions. — map_est_types","text":"model character string representing restriction (e.g., \"GRFRPR\", \"GRGLFRFL\"). label character string representing presence absence rarity dimension.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/map_est_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Rarity Types to Established Restrictions. — map_est_types","text":"character string rarity type match exists established restriction.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/map_est_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Rarity Types to Established Restrictions. — map_est_types","text":"","code":"map_est_types(\"GRFRPR\", \"GR+FR-PR+\") #> GR+FR-PR+  #>  \"Relict\"  map_est_types(\"GRGLFRFL\", \"GR-GL-FR-FL-\") #> GR-GL-FR-FL-  #>          \"L\""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","title":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","text":"function calculates multiple dimensions rarity based set rarity restrictions supports geographic, functional, phylogenetic rarity axes across regional local scales, depending availability trait data, abundance data, phylogenetic tree.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","text":"","code":"prepare_gdrarity_axes(   models_to_run,   species_df,   species_col = \"species\",   abundance_df = NULL,   phylogeny = NULL,   geo_rarity_method = c(\"taxonomic\", \"range\"),   fun_rarity_method = c(\"min_distance\", \"mean_distance\", \"none\"),   trait_columns = NULL,   min_dbscan_points = 5,   min_dbscan_distance = 1,   gbif_limit = 2000,   num_cores = 1,   site_col = \"site\",   abundance_col = \"abundance\",   time = FALSE,   time_slices = NULL,   relative = TRUE,   abundance = TRUE,   use_precomputed_axes = FALSE )"},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_axes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","text":"models_to_run Character vector restrictions (e.g., \"GR\", \"FRFL\", \"GLFRPR\", etc.) specifying axes compute. species_df Data frame containing species-level information, including traits optionally precomputed rarity values. species_col Name column species_df containing species names. Default \"species\". abundance_df Optional data frame species abundance data. Must contain \"species\", \"site\", \"abundance\" columns. phylogeny Optional phylo object computing phylogenetic distances. geo_rarity_method Method computing regional geographic rarity. Options: \"range\" range size via GBIF, \"taxonomic\"(default) use relative occupancy viafunrar`. fun_rarity_method Method regional functional rarity calculation. Options: \"min_distance\" (default) use minimum Euclidean distance, \"mean_distance\" use mean Euclidean distance, \"none\". trait_columns Character vector trait column names used functional rarity metrics. min_dbscan_points Integer DBSCAN range estimation (minimum points). Default 5. min_dbscan_distance Numeric minimum distance (degrees) DBSCAN range estimation. Default 1. gbif_limit Maximum number GBIF records download per species (computing range size). Default 2000. num_cores Number cores parallel operations. Default 1. site_col Name column representing community site identity abundance_df. Default \"site\". abundance_col Name column representing abundance values. Default \"abundance\". time Logical; TRUE, time-sliced evolutionary distinctiveness computed. Default FALSE. time_slices Numeric vector time slices calculating time-sliced ED. Used time = TRUE. relative Logical; whether scale phylogenetic local distinctiveness (PL) values relative maximum distance. Default TRUE. abundance Logical; whether use abundance-weighted PL (phylogenetic local distinctiveness). Default TRUE. #' @param use_precomputed_axes Logical. TRUE, function use rarity axes already present species_df models specified models_to_run instead recomputing . Additional, non-standard axes (e.g., \"H\" habitat specificity) always passed automatically exist species_df, regardless setting. Default FALSE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_axes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","text":"data frame containing species computed rarity dimensions, one column per axis (e.g., \"GR\", \"FL\", \"PR\").","code":""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_axes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","text":"function calculates following axes requested data available: GR – Regional Geographic Rarity (range size restrictedness) GL – Local Geographic Rarity (funrar::scarcity_stack()) FR – Regional Functional Rarity (minimum mean trait distance) FL – Local Functional Rarity (funrar::distinctiveness_stack()) PR – Regional Phylogenetic Rarity (evolutionary distinctiveness) PL – Local Phylogenetic Rarity (abundance-weighted unweighted MPD) User-defined custom rarity axes (e.g., \"H\" habitat specificity) also supported present species_df. Uses functions funrar package. Please cite funrar function used published work.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Rarity Dimensions Based on Selected Restrictions — prepare_gdrarity_axes","text":"","code":"if (FALSE) { # \\dontrun{ # Example with simulated species data and traits species_df <- data.frame(   species = c(\"Abies_procera\", \"Alnus_incana\", \"Carex_distans\"),   trait1 = c(1.1, 2.3, 3.4),  trait2 = c(4.1, 3.3, 2.2) )  abundance_df <- data.frame(   species = c(\"Abies_procera\", \"Alnus_incana\", \"Abies_procera\", \"Carex_distans\"),   site = c(\"A\", \"A\", \"B\", \"B\"),   presence_absence = c(1,1,1,1),   abundance = c(5, 10, 3, 4) )  phylo <- ape::rtree(3) phylo$tip.label <- c(\"Abies_procera\", \"Alnus_incana\", \"Carex_distans\")  axes <- prepare_gdrarity_axes(   models_to_run = c(\"FR\", \"FL\", \"PR\", \"PL\"),   species_df = species_df,   abundance_df = abundance_df,   phylogeny = phylo,   trait_columns = c(\"trait1\", \"trait2\"),   geo_rarity_method = \"taxonomic\",   fun_rarity_method = \"mean_distance\" )  head(axes) } # }"},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","title":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","text":"function assesses available data given set species determines rarity dimensions corresponding restrictions can used analyze multidimensional rarity. also supports automated model selection based data completeness.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","text":"","code":"prepare_gdrarity_models(   species_df,   abundance_df = NULL,   phylo = NULL,   use_internal_phylo = TRUE,   internal_phylo_name = \"ALLMB\",   trait_cols = NULL,   species_col = \"species\",   use_most_complete_model = FALSE,   model = NULL,   additional_dimensions = NULL )"},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","text":"species_df data frame least one column identifying species (default column name \"species\"). abundance_df Optional data frame abundance data. Must contain columns \"species\", \"site\", \"abundance\" provided. phylo Optional phylo object representing phylogenetic tree. provided, internal tree can used. use_internal_phylo Logical; TRUE (default) phylo provided, function attempt retrieve internal seed plant phylogeny. internal_phylo_name Character; name internal tree use (e.g., \"ALLMB\"). trait_cols Optional character vector specifying names trait columns species_df. species_col Character; name column species_df contains species names (default \"species\"). use_most_complete_model Logical; TRUE, returns complete model available. model Optional character vector specific model codes restrict output . specified, models returned (valid). Restrictions named using rarity dimensions following order: geographic (G), functional (F), phylogenetic (P) regional (R) local (L) scales; run full global model code GRGLFRFLPRPL. additional_dimensions Optional character vector additional column names species_df treat rarity dimensions (e.g., \"HabitatType\").","code":""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","text":"(invisible) list following components: species_df processed species data frame. abundance_df original abundance data frame provided. trait_cols trait column names, traits available. phylo pruned phylogenetic tree used, NULL none available. available_axes Character vector available rarity axes (e.g., \"GR\", \"FR\"). models_to_run Character vector restrictions use based input data.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","text":"function checks availability different rarity dimensions: \"GR\": Geographic restriction (always available species list exists). \"GL\": Geographic local abundance (requires abundance_df). \"FR\": Functional restriction (requires trait data). \"FL\": Functional local abundance (requires trait abundance data). \"PR\": Phylogenetic restriction (requires phylogeny). \"PL\": Phylogenetic local abundance (requires phylogeny). Additional rarity dimensions can provided. function  constructs valid model codes (e.g., \"GRFR\", \"GRGLFRFL\", etc.) based combinations available axes.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/prepare_gdrarity_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Restrictions for the Global Model of Discretized Rarity — prepare_gdrarity_models","text":"","code":"if (FALSE) { # \\dontrun{ species_df <- data.frame(species = c(\"Abies_procera\", \"Alnus_incana\"), trait1 = c(1.2, 3.4)) abundance_df <- data.frame(species = c(\"Abies_procera\", \"Alnus_incana\"), site = c(\"A\", \"A\"), abundance = c(10, 5))  setup <- prepare_gdrarity_models(   species_df = species_df,   abundance_df = abundance_df,   trait_cols = \"trait1\",   use_internal_phylo = TRUE,   internal_phylo_name = \"ALLMB\" ) setup$models_to_run } # }"},{"path":"https://anytko.github.io/GDRarity/reference/range_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"Calculates total range size (square kilometers) species list range polygons. Can used polygons clipped land boundaries raw convex hull polygons.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/range_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"","code":"range_sizes(clipped_polygons_list, species_col = \"species_name\")"},{"path":"https://anytko.github.io/GDRarity/reference/range_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"clipped_polygons_list named list element list sf polygon objects representing range species. species_col Character string specifying name species column output. Default \"species_name\".","code":""},{"path":"https://anytko.github.io/GDRarity/reference/range_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"tibble two columns: species_col — species name. range_size — total range size square kilometers.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/range_sizes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"species, function sums areas polygons clipped_polygons_list using sf::st_area(). Areas returned square kilometers dividing default square meters result 1e6. Polygons invalid (!st_is_valid()) skipped, errors area calculation caught reported warnings.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/range_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute range sizes (sq km) from clipped or raw range polygons — range_sizes","text":"","code":"# Create a dataframe with a 'species_name' column test_data <- data.frame(species_name = c(\"Acer_campestre\", \"Acer_platanoides\")) # Generate range polygons for the speceis in the dataframe polygon_list <- get_range_convex_hulls(test_data) #> Processing species: Acer_campestre #> Processing species: Acer_platanoides # Get continent boundaries continent_sf <- get_continent_sf() #> Error in get_continent_sf(): Default continent GeoJSON file not found. Ensure the file is in the 'extdata' directory of the package. # Clip these range polygons to the continent bounds clipped_polygon_list <- clip_polygons_to_land(polygon_list, continent_sf) #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation #> Warning: restarting interrupted promise evaluation # Generate range sizes for each speices using the clipped range polygons sizes <- range_sizes(clipped_polygons_list = clipped_polygon_list)"},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Restriction Codes to Simplified Names — rename_model_code","title":"Rename Restriction Codes to Simplified Names — rename_model_code","text":"function takes character vector model codes simplifies combining adjacent 'R' 'L' suffixes base letter (G, F, P) single 'RL'. also applies established names specific restrictions.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Restriction Codes to Simplified Names — rename_model_code","text":"","code":"rename_model_code(codes)"},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Restriction Codes to Simplified Names — rename_model_code","text":"codes Character vector model restrictions rename.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Restriction Codes to Simplified Names — rename_model_code","text":"named character vector original restrictions names simplified names values.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Restriction Codes to Simplified Names — rename_model_code","text":"","code":"rename_model_code(c(\"GRGL\", \"GRFRPR\", \"GRGLFRFLPRPL\")) #>         GRGL       GRFRPR GRGLFRFLPRPL  #>        \"GRL\"        \"EER\"        \"GDR\""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Columns in a Data Frame Based on Restriction Names — rename_model_columns","title":"Rename Columns in a Data Frame Based on Restriction Names — rename_model_columns","text":"function takes data frame character vector restrictions. renames columns data frame matching restrictions using simplified names produced rename_model_code.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Columns in a Data Frame Based on Restriction Names — rename_model_columns","text":"","code":"rename_model_columns(df, models)"},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Columns in a Data Frame Based on Restriction Names — rename_model_columns","text":"df data frame containing columns rename. models Character vector restrictions (model codes corresponding column names df.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Columns in a Data Frame Based on Restriction Names — rename_model_columns","text":"data frame renamed columns applicable.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/rename_model_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Columns in a Data Frame Based on Restriction Names — rename_model_columns","text":"","code":"df <- data.frame(GRGL = 1:3, GRFRPR = 4:6) rename_model_columns(df, c(\"GRGL\", \"GRFRPR\")) #>   GRL EER #> 1   1   4 #> 2   2   5 #> 3   3   6"},{"path":"https://anytko.github.io/GDRarity/reference/restriction_performance_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Full Restriction Performance Pipeline — restriction_performance_pipeline","title":"Run Full Restriction Performance Pipeline — restriction_performance_pipeline","text":"Runs full pipeline generating gdrare combos, evaluating restriction performance ANOVA, summarizing best performing methods using AIC.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/restriction_performance_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Full Restriction Performance Pipeline — restriction_performance_pipeline","text":"","code":"restriction_performance_pipeline(   species_df,   abundance_df,   trait_cols = c(\"SLA\", \"height\", \"seed_mass\"),   geo_methods = c(\"taxonomic\", \"range\"),   fun_methods = c(\"min_distance\", \"mean_distance\"),   abundances = c(TRUE, FALSE),   threshold_sets = list(list(GR = 0.15, GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.75, PL =     0.75), list(GR = 0.15, GL = 0.15, FR = 0.75, FL = 0.75, PR = 0.75, PL = 0.75),     list(GR = 0.15, GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.9, PL = 0.9), list(GR = 0.15,     GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.75, PL = 0.75)),   direction_sets = list(list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\"), list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\"), list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\"), list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\")),   species_col = \"species\",   response_vars = c(\"range_diff\", \"flowering_duration\"),   use_internal_phylo = TRUE,   internal_phylo_name = \"ALLMB\",   phylo = NULL,   k_means = FALSE,   additional_dimensions = NULL,   model = NULL,   verbose = TRUE )"},{"path":"https://anytko.github.io/GDRarity/reference/restriction_performance_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Full Restriction Performance Pipeline — restriction_performance_pipeline","text":"species_df Data frame species trait metadata. abundance_df Data frame species--site abundance data. Must contain columns 'species', 'site', 'presence_absence', 'abundance'. trait_cols Character vector trait column names use. geo_methods Method calculate geographic rarity. Options: \"taxonomic\" (based site occupancy), \"range\" (based convex hull/range size). Default \"taxonomic\". fun_methods Method functional rarity. Options: \"min_distance\", \"mean_distance\", \"none\" exclude functional rarity. Default \"min_distance\". abundances Logical; TRUE, include abundance weighting calculating community rarity metrics. Default TRUE. threshold_sets List threshold sets rarity classification. Must list list. direction_sets List direction sets (\"high\"/\"low\") corresponding threshold sets. Must list list. species_col Name species column species_df. response_vars Character vector response variables ANOVA testing. use_internal_phylo Logical use internal seed plant phylogeny. internal_phylo_name Name internal seed plant phylogeny use applicable. Default: \"ALLMB\". Options: \"ALLMB\", \"ALLOTB\", \"GBMB\", \"GBOTB\". phylo optional phylogenetic tree class phylo. provided use_internal_phylo FALSE, tree used phylogenetic rarity calculations. k_means Logical, whether use k-means clustering. additional_dimensions Optional list additional custom rarity axes include analysis. model Optional specified restriction pass . verbose Logical print progress. Default TRUE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/restriction_performance_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Full Restriction Performance Pipeline — restriction_performance_pipeline","text":"list containing: combos: Output list run_all_gdrare_combos(). anova_results: Data frame combined ANOVA results. best_models: Data frame best method selected per restriction response variable.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/run_all_gdrare_combos.html","id":null,"dir":"Reference","previous_headings":"","what":"Run All Restrictions of the Global Model of Discretized Rarity — run_all_gdrare_combos","title":"Run All Restrictions of the Global Model of Discretized Rarity — run_all_gdrare_combos","text":"Runs gdrare pipeline restrictions. Returns list dataframes joined original species data, summaries thresholds, directions, parameter grid.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/run_all_gdrare_combos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run All Restrictions of the Global Model of Discretized Rarity — run_all_gdrare_combos","text":"","code":"run_all_gdrare_combos(   species_df,   abundance_df = NULL,   trait_cols = NULL,   geo_methods = c(\"taxonomic\", \"range\"),   fun_methods = c(\"min_distance\", \"mean_distance\"),   abundances = c(TRUE, FALSE),   threshold_sets = list(list(GR = 0.15, GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.75, PL =     0.75), list(GR = 0.15, GL = 0.15, FR = 0.75, FL = 0.75, PR = 0.75, PL = 0.75),     list(GR = 0.15, GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.9, PL = 0.9), list(GR = 0.15,     GL = 0.15, FR = 0.9, FL = 0.9, PR = 0.75, PL = 0.75)),   direction_sets = list(list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\"), list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\"), list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\"), list(GR = \"low\", GL = \"low\", FR = \"high\", FL = \"high\", PR =     \"high\", PL = \"high\")),   species_col = \"species\",   use_internal_phylo = TRUE,   internal_phylo_name = \"ALLMB\",   k_means = FALSE,   additional_dimensions = NULL,   model = NULL,   phylo = NULL,   verbose = TRUE )"},{"path":"https://anytko.github.io/GDRarity/reference/run_all_gdrare_combos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run All Restrictions of the Global Model of Discretized Rarity — run_all_gdrare_combos","text":"species_df Data frame species trait metadata. abundance_df Data frame site--species abundance data. trait_cols Character vector trait column names use. geo_methods Character vector methods use regional geographic rarity. Default: c(\"taxonomic\", \"range\"). fun_methods Character vector methods use regional functional rarity. Default: c(\"min_distance\", \"mean_distance\"). abundances Logical vector indicating whether include abundance local phylogenetic rarity calculations. Default: c(TRUE, FALSE). threshold_sets List named numeric vectors defining rarity thresholds combination. Must length direction_sets. direction_sets List named character vectors (\"high\"/\"low\") defining threshold directions combination. Must length threshold_sets. species_col Name species identifier column data frames. Default: \"species\". use_internal_phylo Logical, whether use internal seed plant phylogeny. Default: TRUE. internal_phylo_name Name internal seed plant phylogeny use applicable. Default: \"ALLMB\". Options: \"ALLMB\", \"ALLOTB\", \"GBMB\", \"GBOTB\". k_means Logical, whether apply k-means clustering. Default: FALSE. additional_dimensions Optional list additional custom rarity axes include analysis. model Optional specific restriction pass pipeline. Default: NULL. phylo optional phylogenetic tree class phylo. provided use_internal_phylo FALSE, tree used phylogenetic rarity calculations. verbose Logical, whether print progress messages. Default: TRUE.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/run_all_gdrare_combos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run All Restrictions of the Global Model of Discretized Rarity — run_all_gdrare_combos","text":"list elements: results: List data frames rarity categorizations restrictions per method combo. threshold_sets: Data frame summarizing threshold sets used. direction_sets: Data frame summarizing direction sets used. param_grid: Data frame full parameter grid combinations.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale by Median — scale_by_median","title":"Scale by Median — scale_by_median","text":"Transform selected columns data frame z-scores centered around median using median absolute deviation (MAD). transformation recommended using range size evolutionary distinctiveness geographic phylogenetic dimensions rarity.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale by Median — scale_by_median","text":"","code":"scale_by_median(data_frame, columns_chosen = NULL)"},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale by Median — scale_by_median","text":"data_frame data frame containing columns transform. Must contain NA values. columns_chosen character vector specifying names columns transform. NULL (default), columns except \"species_name\" transformed.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale by Median — scale_by_median","text":"data frame selected columns scaled z-scores based median MAD.","code":""},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale by Median — scale_by_median","text":"function calculates z-scores : $$z = (x - \\text{median}(x)) / \\text{MAD}(x)$$ MAD computed median absolute deviations median,without applying standard consistency constant. columns_chosen NULL, columns except \"species_name\" scaled.","code":""},{"path":[]},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Scale by Median — scale_by_median","text":"Alivia G Nytko, anytko@vols.utk.edu","code":""},{"path":"https://anytko.github.io/GDRarity/reference/scale_by_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale by Median — scale_by_median","text":"","code":"# Create dataframe of pine species with range sizes and evolutionary distinctiveness pine_names <- c(\"Pinus_banksiana\", \"Pinus_cembra\", \"Pinus_nigra\", \"Pinus_pinaster\",                  \"Pinus_pinea\", \"Pinus_ponderosa\", \"Pinus_strobus\", \"Pinus_sylvestris\", \"Pinus_uncinata\") evol_dist_values <- runif(n = 9, min = -50, max = 50) range_values <- runif(n = 9, min = -20000, max = 20000) pine_data <- data.frame(species_name = pine_names, range_size = range_values, evol_dist = evol_dist_values)  # Apply median scaling to all columns except species_name transform_all <- scale_by_median(data_frame = pine_data) print(transform_all) #>       species_name  range_size   evol_dist #> 1  Pinus_banksiana  0.01035741  0.09593961 #> 2     Pinus_cembra -3.12878817  1.59802104 #> 3      Pinus_nigra -2.57155004  0.00000000 #> 4   Pinus_pinaster -1.00000000 -1.29524563 #> 5      Pinus_pinea  0.00000000 -1.23479241 #> 6  Pinus_ponderosa  1.90583567 -1.00000000 #> 7    Pinus_strobus  0.52071923  0.75267739 #> 8 Pinus_sylvestris -0.67693971 -2.63169666 #> 9   Pinus_uncinata  1.07995383  0.58976869"}]
